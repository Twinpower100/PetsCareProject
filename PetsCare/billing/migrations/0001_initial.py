# Generated by Django 5.2.5 on 2025-09-15 12:59

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('booking', '0001_initial'),
        ('catalog', '0001_initial'),
        ('geolocation', '0002_initial'),
        ('providers', '0002_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BlockingSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the schedule', max_length=100, verbose_name='Name')),
                ('frequency', models.CharField(choices=[('hourly', 'Hourly'), ('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('custom', 'Custom Interval')], default='daily', help_text='Frequency of checks', max_length=20, verbose_name='Frequency')),
                ('time', models.TimeField(default='02:00', help_text='Time of day to perform checks (HH:MM format)', verbose_name='Time')),
                ('days_of_week', models.JSONField(default=list, help_text='Days of week for weekly frequency (0=Monday, 6=Sunday)', verbose_name='Days of Week')),
                ('day_of_month', models.PositiveIntegerField(blank=True, help_text='Day of month for monthly frequency (1-31)', null=True, verbose_name='Day of Month')),
                ('custom_interval_hours', models.PositiveIntegerField(blank=True, help_text='Custom interval in hours for custom frequency', null=True, verbose_name='Custom Interval (Hours)')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this schedule is active', verbose_name='Is Active')),
                ('last_run', models.DateTimeField(blank=True, help_text='When this schedule was last executed', null=True, verbose_name='Last Run')),
                ('next_run', models.DateTimeField(blank=True, help_text='When this schedule will run next', null=True, verbose_name='Next Run')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Blocking Schedule',
                'verbose_name_plural': 'Blocking Schedules',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ContractType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('code', models.CharField(help_text='Unique technical code (Latin letters, numbers, underscores). Used for integrations and business logic.', max_length=50, unique=True, validators=[django.core.validators.RegexValidator(message='Code must contain only Latin letters, numbers and underscores.', regex='^[a-zA-Z0-9_]+$')], verbose_name='Code')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('standard_commission_percent', models.DecimalField(blank=True, decimal_places=2, help_text='Standard commission percentage for this contract type', max_digits=5, null=True, verbose_name='Standard Commission Percent')),
                ('standard_commission_fixed', models.DecimalField(blank=True, decimal_places=2, help_text='Standard fixed commission amount for this contract type', max_digits=10, null=True, verbose_name='Standard Commission Fixed')),
                ('standard_payment_terms_days', models.PositiveIntegerField(default=30, help_text='Standard payment terms in days for this contract type', verbose_name='Standard Payment Terms (Days)')),
                ('standard_conditions_text', models.TextField(blank=True, help_text='Standard terms and conditions text for this contract type', verbose_name='Standard Conditions Text')),
                ('standard_debt_threshold', models.DecimalField(blank=True, decimal_places=2, help_text='Standard debt threshold for this contract type', max_digits=12, null=True, verbose_name='Standard Debt Threshold')),
                ('standard_overdue_threshold_1', models.PositiveIntegerField(blank=True, help_text='Standard overdue threshold 1 for this contract type', null=True, verbose_name='Standard Overdue Threshold 1 (Days)')),
                ('standard_overdue_threshold_2', models.PositiveIntegerField(blank=True, help_text='Standard overdue threshold 2 for this contract type', null=True, verbose_name='Standard Overdue Threshold 2 (Days)')),
                ('standard_overdue_threshold_3', models.PositiveIntegerField(blank=True, help_text='Standard overdue threshold 3 for this contract type', null=True, verbose_name='Standard Overdue Threshold 3 (Days)')),
            ],
            options={
                'verbose_name': 'Contract Type',
                'verbose_name_plural': 'Contract Types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='ISO 4217 currency code (e.g. USD, EUR, RUB)', max_length=3, unique=True, verbose_name='Currency Code')),
                ('name', models.CharField(max_length=50, verbose_name='Currency Name')),
                ('symbol', models.CharField(max_length=5, verbose_name='Currency Symbol')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('exchange_rate', models.DecimalField(decimal_places=4, help_text='Exchange rate to base currency', max_digits=10, verbose_name='Exchange Rate')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Last Updated')),
            ],
            options={
                'verbose_name': 'Currency',
                'verbose_name_plural': 'Currencies',
                'ordering': ['code'],
            },
        ),
        migrations.CreateModel(
            name='BillingManagerProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(help_text='Date when billing manager started managing this provider', verbose_name='Start Date')),
                ('status', models.CharField(choices=[('active', 'Active'), ('vacation', 'On Vacation'), ('temporary', 'Temporary'), ('terminated', 'Terminated')], default='active', help_text='Current status of the management relationship', max_length=20, verbose_name='Status')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this management relationship', verbose_name='Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('billing_manager', models.ForeignKey(help_text='User with billing_manager role', on_delete=django.db.models.deletion.CASCADE, related_name='managed_providers', to=settings.AUTH_USER_MODEL, verbose_name='Billing Manager')),
                ('provider', models.ForeignKey(help_text='Provider managed by this billing manager', on_delete=django.db.models.deletion.CASCADE, related_name='billing_managers', to='providers.provider', verbose_name='Provider')),
                ('temporary_manager', models.ForeignKey(blank=True, help_text='Temporary manager during vacation or absence', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='temporary_managed_providers', to=settings.AUTH_USER_MODEL, verbose_name='Temporary Manager')),
            ],
            options={
                'verbose_name': 'Billing Manager Provider',
                'verbose_name_plural': 'Billing Manager Providers',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='BillingManagerEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('assigned', 'Assigned'), ('vacation_start', 'Vacation Started'), ('vacation_end', 'Vacation Ended'), ('temporary_assigned', 'Temporary Assigned'), ('terminated', 'Terminated')], help_text='Type of event that occurred', max_length=20, verbose_name='Event Type')),
                ('effective_date', models.DateField(help_text='Date when this event became effective', verbose_name='Effective Date')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this event', verbose_name='Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('created_by', models.ForeignKey(help_text='User who created this event', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='billing_manager_events_created', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('billing_manager_provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='billing.billingmanagerprovider', verbose_name='Billing Manager Provider')),
            ],
            options={
                'verbose_name': 'Billing Manager Event',
                'verbose_name_plural': 'Billing Manager Events',
                'ordering': ['-effective_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='BlockingRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Descriptive name for this blocking rule', max_length=200, verbose_name='Rule Name')),
                ('description', models.TextField(blank=True, help_text='Detailed description of the rule', verbose_name='Description')),
                ('debt_amount_threshold', models.DecimalField(decimal_places=2, help_text='Minimum debt amount to trigger blocking', max_digits=12, verbose_name='Debt Amount Threshold')),
                ('overdue_days_threshold', models.PositiveIntegerField(help_text='Minimum number of overdue days to trigger blocking', verbose_name='Overdue Days Threshold')),
                ('is_mass_rule', models.BooleanField(default=False, help_text='If True, applies to multiple providers based on criteria', verbose_name='Is Mass Rule')),
                ('regions', models.JSONField(blank=True, default=list, help_text='List of region IDs for mass rule application', verbose_name='Regions')),
                ('service_types', models.JSONField(blank=True, default=list, help_text='List of service type IDs for mass rule application', verbose_name='Service Types')),
                ('priority', models.PositiveIntegerField(default=100, help_text='Rule priority (lower number = higher priority)', verbose_name='Priority')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this rule is active', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_blocking_rules', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
            ],
            options={
                'verbose_name': 'Blocking Rule',
                'verbose_name_plural': 'Blocking Rules',
                'ordering': ['priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='BlockingSystemSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_system_enabled', models.BooleanField(default=True, help_text='Whether the blocking system is enabled', verbose_name='System Enabled')),
                ('check_frequency_hours', models.PositiveIntegerField(default=24, help_text='How often to check for blocking conditions (in hours)', verbose_name='Check Frequency (Hours)')),
                ('check_time', models.TimeField(default='02:00', help_text='Time of day to perform checks (HH:MM format)', verbose_name='Check Time')),
                ('notification_delay_hours', models.PositiveIntegerField(default=1, help_text='Delay before sending notifications after blocking (in hours)', verbose_name='Notification Delay (Hours)')),
                ('notify_billing_managers', models.BooleanField(default=True, help_text='Whether to notify billing managers about blockings', verbose_name='Notify Billing Managers')),
                ('notify_provider_admins', models.BooleanField(default=True, help_text='Whether to notify provider administrators about blockings', verbose_name='Notify Provider Admins')),
                ('auto_resolve_on_payment', models.BooleanField(default=True, help_text='Automatically resolve blockings when debt is paid', verbose_name='Auto Resolve On Payment')),
                ('working_days', models.JSONField(default=list, help_text='List of working days (0=Monday, 6=Sunday)', verbose_name='Working Days')),
                ('exclude_holidays', models.BooleanField(default=True, help_text='Whether to exclude holidays from overdue calculations', verbose_name='Exclude Holidays')),
                ('log_all_checks', models.BooleanField(default=True, help_text='Whether to log all blocking checks', verbose_name='Log All Checks')),
                ('log_resolutions', models.BooleanField(default=True, help_text='Whether to log blocking resolutions', verbose_name='Log Resolutions')),
                ('global_debt_threshold', models.DecimalField(blank=True, decimal_places=2, help_text='Global debt threshold for automatic inheritance in contracts', max_digits=12, null=True, verbose_name='Global Debt Threshold')),
                ('global_overdue_threshold_1', models.PositiveIntegerField(blank=True, help_text='Global overdue threshold 1 for automatic inheritance in contracts', null=True, verbose_name='Global Overdue Threshold 1 (Days)')),
                ('global_overdue_threshold_2', models.PositiveIntegerField(blank=True, help_text='Global overdue threshold 2 for automatic inheritance in contracts', null=True, verbose_name='Global Overdue Threshold 2 (Days)')),
                ('global_overdue_threshold_3', models.PositiveIntegerField(blank=True, help_text='Global overdue threshold 3 for automatic inheritance in contracts', null=True, verbose_name='Global Overdue Threshold 3 (Days)')),
                ('inactive_owner_threshold_days', models.PositiveIntegerField(default=180, help_text='Number of days of inactivity to consider owner as inactive (default: 6 months)', verbose_name='Inactive Owner Threshold (Days)')),
                ('pet_confirmation_deadline_days', models.PositiveIntegerField(default=30, help_text='Number of days to wait for pet status confirmation before taking action (default: 1 month)', verbose_name='Pet Confirmation Deadline (Days)')),
                ('auto_delete_unconfirmed_pets', models.BooleanField(default=True, help_text='Automatically delete pets if no confirmation received within deadline', verbose_name='Auto Delete Unconfirmed Pets')),
                ('auto_assign_coowner_as_main', models.BooleanField(default=True, help_text='Automatically assign a co-owner as main owner if primary owner is inactive', verbose_name='Auto Assign Co-owner as Main')),
                ('coowner_assignment_priority', models.CharField(choices=[('oldest', 'Oldest co-owner'), ('newest', 'Newest co-owner'), ('random', 'Random co-owner')], default='oldest', help_text='Priority method for assigning co-owner as main owner', max_length=20, verbose_name='Co-owner Assignment Priority')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('updated_by', models.ForeignKey(blank=True, help_text='User who last updated the settings', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Blocking System Settings',
                'verbose_name_plural': 'Blocking System Settings',
            },
        ),
        migrations.CreateModel(
            name='BlockingTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Descriptive name for this blocking template', max_length=200, verbose_name='Template Name')),
                ('description', models.TextField(blank=True, help_text='Detailed description of the template', verbose_name='Description')),
                ('country', models.CharField(help_text='Country (required)', max_length=100, verbose_name='Country')),
                ('region', models.CharField(blank=True, help_text='Region/state (optional)', max_length=100, null=True, verbose_name='Region')),
                ('city', models.CharField(blank=True, help_text='City (optional)', max_length=100, null=True, verbose_name='City')),
                ('radius_km', models.PositiveIntegerField(default=10, help_text='Radius in kilometers for geographic targeting', verbose_name='Radius (km)')),
                ('debt_threshold', models.DecimalField(decimal_places=2, help_text='Maximum allowed debt amount in contract currency', max_digits=12, verbose_name='Debt Threshold')),
                ('threshold1_days', models.PositiveIntegerField(help_text='Days overdue for information notification', verbose_name='Threshold 1 (Days)')),
                ('threshold2_days', models.PositiveIntegerField(help_text='Days overdue for exclusion from search', verbose_name='Threshold 2 (Days)')),
                ('threshold3_days', models.PositiveIntegerField(help_text='Days overdue for full blocking', verbose_name='Threshold 3 (Days)')),
                ('payment_delay_days', models.PositiveIntegerField(default=0, help_text='Allowed payment delay in days', verbose_name='Payment Delay Days')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this template is active', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_blocking_templates', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('location', models.ForeignKey(blank=True, help_text='Associated location for precise geographic targeting', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='blocking_templates', to='geolocation.location', verbose_name='Location')),
                ('currency', models.ForeignKey(help_text='Currency for debt threshold', on_delete=django.db.models.deletion.PROTECT, to='billing.currency', verbose_name='Currency')),
            ],
            options={
                'verbose_name': 'Blocking Template',
                'verbose_name_plural': 'Blocking Templates',
                'ordering': ['country', 'region', 'city', 'name'],
            },
        ),
        migrations.CreateModel(
            name='BlockingTemplateHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('change_type', models.CharField(choices=[('created', 'Created'), ('updated', 'Updated'), ('deleted', 'Deleted')], help_text='Type of change made', max_length=20, verbose_name='Change Type')),
                ('previous_values', models.JSONField(default=dict, help_text='Previous values before the change', verbose_name='Previous Values')),
                ('new_values', models.JSONField(default=dict, help_text='New values after the change', verbose_name='New Values')),
                ('change_reason', models.TextField(blank=True, help_text='Reason for the change', verbose_name='Change Reason')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('changed_by', models.ForeignKey(help_text='User who made the change', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Changed By')),
                ('template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history', to='billing.blockingtemplate', verbose_name='Template')),
            ],
            options={
                'verbose_name': 'Blocking Template History',
                'verbose_name_plural': 'Blocking Template Histories',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Contract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=50, unique=True, verbose_name='Contract Number')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('pending_approval', 'Pending Approval'), ('active', 'Active'), ('rejected', 'Rejected'), ('suspended', 'Suspended'), ('terminated', 'Terminated')], default='draft', max_length=20, verbose_name='Status')),
                ('terms', models.TextField(verbose_name='Terms And Conditions')),
                ('document', models.FileField(blank=True, help_text='Upload scanned contract document', null=True, upload_to='contracts/%Y/%m/%d/', verbose_name='Contract Document')),
                ('document_name', models.CharField(blank=True, help_text='Original name of the uploaded document', max_length=255, null=True, verbose_name='Document Name')),
                ('payment_deferral_days', models.PositiveIntegerField(default=0, help_text='Number of days for payment deferral after service completion', verbose_name='Payment Deferral Days')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('invoice_period', models.CharField(choices=[('month', 'Once a month'), ('n_months', 'Once in N months'), ('week', 'Once a week'), ('n_weeks', 'Once in N weeks')], default='month', help_text='Frequency of invoice generation', max_length=20, verbose_name='Invoice Period')),
                ('invoice_period_value', models.PositiveIntegerField(default=1, help_text='Number of months or weeks for invoice period. For example, enter 3 for "Once in N months" to generate an invoice every 3 months. For "Once a month" or "Once a week" leave as 1.', verbose_name='Invoice Period Value')),
                ('debt_threshold', models.DecimalField(decimal_places=2, help_text='Maximum allowed debt amount in contract currency', max_digits=12, verbose_name='Debt Threshold')),
                ('overdue_threshold_1', models.PositiveIntegerField(help_text='Days overdue for information notification', verbose_name='Overdue Threshold 1 (Days)')),
                ('overdue_threshold_2', models.PositiveIntegerField(help_text='Days overdue for exclusion from search', verbose_name='Overdue Threshold 2 (Days)')),
                ('overdue_threshold_3', models.PositiveIntegerField(help_text='Days overdue for full blocking', verbose_name='Overdue Threshold 3 (Days)')),
                ('exclude_from_automatic_blocking', models.BooleanField(default=False, help_text='Whether this contract should be excluded from automatic blocking checks', verbose_name='Exclude From Automatic Blocking')),
                ('blocking_exclusion_reason', models.TextField(blank=True, help_text='Reason for excluding this contract from automatic blocking', verbose_name='Blocking Exclusion Reason')),
                ('submitted_for_approval_at', models.DateTimeField(blank=True, help_text='When the contract was submitted for approval', null=True, verbose_name='Submitted For Approval At')),
                ('approved_at', models.DateTimeField(blank=True, help_text='When the contract was approved', null=True, verbose_name='Approved At')),
                ('rejection_reason', models.TextField(blank=True, help_text='Reason for rejecting the contract', verbose_name='Rejection Reason')),
                ('approved_by', models.ForeignKey(blank=True, help_text='User who approved the contract', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_contracts', to=settings.AUTH_USER_MODEL, verbose_name='Approved By')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_contracts', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='contracts', to='providers.provider', verbose_name='Provider')),
                ('contract_type', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='contracts', to='billing.contracttype', verbose_name='Contract Type')),
                ('base_currency', models.ForeignKey(help_text='Base currency for calculations', on_delete=django.db.models.deletion.PROTECT, related_name='base_contracts', to='billing.currency', verbose_name='Base Currency')),
                ('currency', models.ForeignKey(help_text='Contract currency', on_delete=django.db.models.deletion.PROTECT, related_name='contracts', to='billing.currency', verbose_name='Currency')),
            ],
            options={
                'verbose_name': 'Contract',
                'verbose_name_plural': 'Contracts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ContractApprovalHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action', models.CharField(choices=[('created', 'Created'), ('submitted', 'Submitted for approval'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('activated', 'Activated')], help_text='Type of action performed', max_length=20, verbose_name='Action')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='When the action was performed', verbose_name='Timestamp')),
                ('reason', models.TextField(blank=True, help_text='Reason for the action', verbose_name='Reason')),
                ('changes_summary', models.JSONField(default=dict, help_text='Summary of changes made', verbose_name='Changes Summary')),
                ('contract', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='approval_history', to='billing.contract', verbose_name='Contract')),
                ('user', models.ForeignKey(help_text='User who performed the action', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Contract Approval History',
                'verbose_name_plural': 'Contract Approval Histories',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='ContractCommission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate', models.DecimalField(decimal_places=2, help_text='Commission rate in percent', max_digits=5, verbose_name='Rate')),
                ('fixed_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Fixed commission amount', max_digits=10, null=True, verbose_name='Fixed Amount')),
                ('period', models.CharField(blank=True, choices=[('day', 'Day'), ('week', 'Week'), ('month', 'Month'), ('year', 'Year')], help_text='Period for fixed commission', max_length=10, null=True, verbose_name='Period')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('contract', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commissions', to='billing.contract', verbose_name='Contract')),
                ('service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contract_commissions', to='catalog.service', verbose_name='Service')),
            ],
            options={
                'verbose_name': 'Contract Commission',
                'verbose_name_plural': 'Contract Commissions',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='ContractDiscount',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rate', models.DecimalField(decimal_places=2, help_text='Discount rate in percent', max_digits=5, verbose_name='Rate')),
                ('fixed_amount', models.DecimalField(blank=True, decimal_places=2, help_text='Fixed discount amount', max_digits=10, null=True, verbose_name='Fixed Amount')),
                ('start_date', models.DateField(verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, null=True, verbose_name='End Date')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('contract', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='discounts', to='billing.contract', verbose_name='Contract')),
                ('service', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='contract_discounts', to='catalog.service', verbose_name='Service')),
            ],
            options={
                'verbose_name': 'Contract Discount',
                'verbose_name_plural': 'Contract Discounts',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=50, unique=True, verbose_name='Invoice Number')),
                ('start_date', models.DateField(null=True, verbose_name='Start Date')),
                ('end_date', models.DateField(null=True, verbose_name='End Date')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Amount')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('sent', 'Sent'), ('paid', 'Paid'), ('overdue', 'Overdue'), ('cancelled', 'Cancelled')], default='draft', max_length=20, verbose_name='Status')),
                ('issued_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Issued At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('currency', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='billing.currency', verbose_name='Currency')),
                ('provider', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to='providers.provider', verbose_name='Provider')),
            ],
            options={
                'verbose_name': 'Invoice',
                'verbose_name_plural': 'Invoices',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='InvoiceLine',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Booking Amount')),
                ('commission', models.DecimalField(decimal_places=2, max_digits=12, verbose_name='Commission Amount')),
                ('rate', models.DecimalField(decimal_places=2, max_digits=5, verbose_name='Commission Rate')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='booking.booking', verbose_name='Booking')),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='billing.currency', verbose_name='Currency')),
                ('invoice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='lines', to='billing.invoice', verbose_name='Invoice')),
            ],
            options={
                'verbose_name': 'Invoice Line',
                'verbose_name_plural': 'Invoice Lines',
                'ordering': ['invoice', 'booking'],
            },
        ),
        migrations.CreateModel(
            name='OverdueThresholdSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Descriptive name for this threshold setting', max_length=100, verbose_name='Name')),
                ('warning_days', models.PositiveIntegerField(default=7, help_text='Days after which to send warning notification', verbose_name='Warning Days')),
                ('critical_days', models.PositiveIntegerField(default=30, help_text='Days after which to send critical notification', verbose_name='Critical Days')),
                ('suspension_days', models.PositiveIntegerField(default=60, help_text='Days after which to suspend provider services', verbose_name='Suspension Days')),
                ('termination_days', models.PositiveIntegerField(default=90, help_text='Days after which to terminate contract', verbose_name='Termination Days')),
                ('warning_amount', models.DecimalField(decimal_places=2, default=1000.0, help_text='Amount threshold for warning notification', max_digits=12, verbose_name='Warning Amount')),
                ('critical_amount', models.DecimalField(decimal_places=2, default=5000.0, help_text='Amount threshold for critical notification', max_digits=12, verbose_name='Critical Amount')),
                ('suspension_amount', models.DecimalField(decimal_places=2, default=10000.0, help_text='Amount threshold for service suspension', max_digits=12, verbose_name='Suspension Amount')),
                ('termination_amount', models.DecimalField(decimal_places=2, default=20000.0, help_text='Amount threshold for contract termination', max_digits=12, verbose_name='Termination Amount')),
                ('region', models.CharField(blank=True, help_text='Geographic region (e.g., Europe, Asia, Americas)', max_length=50, verbose_name='Region')),
                ('country', models.CharField(blank=True, help_text='Specific country code (ISO 3166-1 alpha-2)', max_length=50, verbose_name='Country')),
                ('notify_provider', models.BooleanField(default=True, help_text='Send notifications to provider', verbose_name='Notify Provider')),
                ('notify_billing_manager', models.BooleanField(default=True, help_text='Send notifications to billing manager', verbose_name='Notify Billing Manager')),
                ('notify_admin', models.BooleanField(default=False, help_text='Send notifications to system admin', verbose_name='Notify Admin')),
                ('auto_suspend', models.BooleanField(default=False, help_text='Automatically suspend services when thresholds are reached', verbose_name='Auto Suspend')),
                ('auto_terminate', models.BooleanField(default=False, help_text='Automatically terminate contract when thresholds are reached', verbose_name='Auto Terminate')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('currency', models.ForeignKey(help_text='Currency for amount thresholds', on_delete=django.db.models.deletion.PROTECT, to='billing.currency', verbose_name='Currency')),
            ],
            options={
                'verbose_name': 'Overdue Threshold Setting',
                'verbose_name_plural': 'Overdue Threshold Settings',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Amount')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', max_length=20, verbose_name='Status')),
                ('payment_method', models.CharField(choices=[('card', 'Credit Card'), ('bank_transfer', 'Bank Transfer'), ('cash', 'Cash')], max_length=20, verbose_name='Payment Method')),
                ('transaction_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='Transaction ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payments', to='booking.booking', verbose_name='Booking')),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PaymentHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Amount')),
                ('due_date', models.DateField(verbose_name='Due Date')),
                ('payment_date', models.DateField(blank=True, null=True, verbose_name='Payment Date')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('paid', 'Paid'), ('overdue', 'Overdue')], default='pending', max_length=20, verbose_name='Status')),
                ('description', models.TextField(blank=True, help_text='Description of the payment', verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('contract', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payment_history', to='billing.contract', verbose_name='Contract')),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='payment_history', to='billing.currency', verbose_name='Currency')),
            ],
            options={
                'verbose_name': 'Payment History',
                'verbose_name_plural': 'Payment History',
                'ordering': ['-due_date'],
            },
        ),
        migrations.CreateModel(
            name='ProviderBlocking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('active', 'Active'), ('resolved', 'Resolved'), ('manual_override', 'Manual Override')], default='active', max_length=20, verbose_name='Status')),
                ('debt_amount', models.DecimalField(decimal_places=2, help_text='Debt amount at the time of blocking', max_digits=12, verbose_name='Debt Amount')),
                ('overdue_days', models.PositiveIntegerField(help_text='Number of overdue days at the time of blocking', verbose_name='Overdue Days')),
                ('blocked_at', models.DateTimeField(auto_now_add=True, verbose_name='Blocked At')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='Resolved At')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this blocking', verbose_name='Notes')),
                ('blocking_rule', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='provider_blockings', to='billing.blockingrule', verbose_name='Blocking Rule')),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='billing.currency', verbose_name='Currency')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blockings', to='providers.provider', verbose_name='Provider')),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_blockings', to=settings.AUTH_USER_MODEL, verbose_name='Resolved By')),
            ],
            options={
                'verbose_name': 'Provider Blocking',
                'verbose_name_plural': 'Provider Blockings',
                'ordering': ['-blocked_at'],
            },
        ),
        migrations.CreateModel(
            name='BlockingNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('blocking_warning', 'Blocking Warning'), ('blocking_activated', 'Blocking Activated'), ('blocking_resolved', 'Blocking Resolved')], max_length=20, verbose_name='Notification Type')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('failed', 'Failed')], default='pending', max_length=20, verbose_name='Status')),
                ('recipient_email', models.EmailField(blank=True, max_length=254, verbose_name='Recipient Email')),
                ('recipient_phone', models.CharField(blank=True, max_length=20, verbose_name='Recipient Phone')),
                ('subject', models.CharField(max_length=200, verbose_name='Subject')),
                ('message', models.TextField(verbose_name='Message')),
                ('sent_at', models.DateTimeField(blank=True, null=True, verbose_name='Sent At')),
                ('error_message', models.TextField(blank=True, verbose_name='Error Message')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('provider_blocking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='billing.providerblocking', verbose_name='Provider Blocking')),
            ],
            options={
                'verbose_name': 'Blocking Notification',
                'verbose_name_plural': 'Blocking Notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Refund',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Amount')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('completed', 'Completed')], default='pending', max_length=20, verbose_name='Status')),
                ('reason', models.TextField(verbose_name='Reason')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('payment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='refunds', to='billing.payment', verbose_name='Payment')),
            ],
            options={
                'verbose_name': 'Refund',
                'verbose_name_plural': 'Refunds',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ServicePrice',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Amount')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('valid_from', models.DateField(default=django.utils.timezone.now, verbose_name='Valid From')),
                ('valid_to', models.DateField(blank=True, null=True, verbose_name='Valid To')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('currency', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='service_prices', to='billing.currency', verbose_name='Currency')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='prices', to='catalog.service', verbose_name='Service')),
            ],
            options={
                'verbose_name': 'Service Price',
                'verbose_name_plural': 'Service Prices',
                'ordering': ['-valid_from'],
            },
        ),
        migrations.AddIndex(
            model_name='billingmanagerprovider',
            index=models.Index(fields=['billing_manager'], name='billing_bil_billing_aaaec3_idx'),
        ),
        migrations.AddIndex(
            model_name='billingmanagerprovider',
            index=models.Index(fields=['provider'], name='billing_bil_provide_82923c_idx'),
        ),
        migrations.AddIndex(
            model_name='billingmanagerprovider',
            index=models.Index(fields=['status'], name='billing_bil_status_267d3f_idx'),
        ),
        migrations.AddIndex(
            model_name='billingmanagerprovider',
            index=models.Index(fields=['start_date'], name='billing_bil_start_d_4909dd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='billingmanagerprovider',
            unique_together={('billing_manager', 'provider', 'start_date')},
        ),
        migrations.AddIndex(
            model_name='billingmanagerevent',
            index=models.Index(fields=['billing_manager_provider'], name='billing_bil_billing_3d224e_idx'),
        ),
        migrations.AddIndex(
            model_name='billingmanagerevent',
            index=models.Index(fields=['event_type'], name='billing_bil_event_t_bda859_idx'),
        ),
        migrations.AddIndex(
            model_name='billingmanagerevent',
            index=models.Index(fields=['effective_date'], name='billing_bil_effecti_12f91f_idx'),
        ),
        migrations.AddIndex(
            model_name='billingmanagerevent',
            index=models.Index(fields=['created_by'], name='billing_bil_created_a4ef39_idx'),
        ),
        migrations.AddIndex(
            model_name='blockingrule',
            index=models.Index(fields=['is_active', 'priority'], name='billing_blo_is_acti_a7fc10_idx'),
        ),
        migrations.AddIndex(
            model_name='blockingrule',
            index=models.Index(fields=['is_mass_rule', 'is_active'], name='billing_blo_is_mass_5523ee_idx'),
        ),
        migrations.AddConstraint(
            model_name='blockingsystemsettings',
            constraint=models.CheckConstraint(condition=models.Q(('id', 1)), name='single_blocking_settings'),
        ),
        migrations.AddIndex(
            model_name='blockingtemplatehistory',
            index=models.Index(fields=['template', 'created_at'], name='billing_blo_templat_552035_idx'),
        ),
        migrations.AddIndex(
            model_name='blockingtemplatehistory',
            index=models.Index(fields=['changed_by', 'created_at'], name='billing_blo_changed_1f72d8_idx'),
        ),
        migrations.AddIndex(
            model_name='contractapprovalhistory',
            index=models.Index(fields=['contract', 'action'], name='billing_con_contrac_94aa34_idx'),
        ),
        migrations.AddIndex(
            model_name='contractapprovalhistory',
            index=models.Index(fields=['user', 'timestamp'], name='billing_con_user_id_565e99_idx'),
        ),
        migrations.AddIndex(
            model_name='contract',
            index=models.Index(fields=['provider', 'status'], name='billing_con_provide_b73510_idx'),
        ),
        migrations.AddIndex(
            model_name='contract',
            index=models.Index(fields=['start_date', 'end_date'], name='billing_con_start_d_d2fc3f_idx'),
        ),
        migrations.AddIndex(
            model_name='contract',
            index=models.Index(fields=['status'], name='billing_con_status_f42db1_idx'),
        ),
        migrations.AddIndex(
            model_name='contract',
            index=models.Index(fields=['exclude_from_automatic_blocking'], name='billing_con_exclude_310ff1_idx'),
        ),
        migrations.AddIndex(
            model_name='blockingtemplate',
            index=models.Index(fields=['country', 'region', 'city'], name='billing_blo_country_e25bd4_idx'),
        ),
        migrations.AddIndex(
            model_name='blockingtemplate',
            index=models.Index(fields=['is_active'], name='billing_blo_is_acti_0f7ce3_idx'),
        ),
        migrations.AddIndex(
            model_name='blockingtemplate',
            index=models.Index(fields=['location'], name='billing_blo_locatio_189d4b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='blockingtemplate',
            unique_together={('country', 'region', 'city', 'name')},
        ),
        migrations.AddIndex(
            model_name='overduethresholdsettings',
            index=models.Index(fields=['currency', 'region'], name='billing_ove_currenc_ce0dce_idx'),
        ),
        migrations.AddIndex(
            model_name='overduethresholdsettings',
            index=models.Index(fields=['country', 'region'], name='billing_ove_country_a77a29_idx'),
        ),
        migrations.AddIndex(
            model_name='providerblocking',
            index=models.Index(fields=['provider', 'status'], name='billing_pro_provide_5b4bdc_idx'),
        ),
        migrations.AddIndex(
            model_name='providerblocking',
            index=models.Index(fields=['status', 'blocked_at'], name='billing_pro_status_6a8394_idx'),
        ),
        migrations.AddIndex(
            model_name='blockingnotification',
            index=models.Index(fields=['status', 'notification_type'], name='billing_blo_status_9c9561_idx'),
        ),
        migrations.AddIndex(
            model_name='blockingnotification',
            index=models.Index(fields=['provider_blocking', 'notification_type'], name='billing_blo_provide_ce5ac2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='serviceprice',
            unique_together={('service', 'currency', 'valid_from')},
        ),
    ]
