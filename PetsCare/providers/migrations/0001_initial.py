# Generated by Django 5.2.5 on 2025-09-15 12:57

import django.contrib.gis.db.models.fields
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('catalog', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EmployeeJoinRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.CharField(max_length=255, verbose_name='Position')),
                ('comment', models.TextField(blank=True, verbose_name='Comment')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20, verbose_name='Status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Employee Join Request',
                'verbose_name_plural': 'Employee Join Requests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EmployeeProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(help_text='Date when employee started working at this provider', verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, help_text='Date when employee stopped working at this provider', null=True, verbose_name='End Date')),
                ('is_manager', models.BooleanField(default=False, help_text='Whether this employee is a manager at this provider', verbose_name='Is Manager')),
                ('is_confirmed', models.BooleanField(default=False, help_text='Confirmed by employee', verbose_name='Is Confirmed')),
                ('confirmation_requested_at', models.DateTimeField(blank=True, help_text='When the confirmation was requested', null=True, verbose_name='Confirmation Requested At')),
                ('confirmed_at', models.DateTimeField(blank=True, help_text='When the confirmation was received', null=True, verbose_name='Confirmed At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Employee Provider',
                'verbose_name_plural': 'Employee Providers',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='EmployeeWorkSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Date')),
                ('start_time', models.TimeField(verbose_name='Start Time')),
                ('end_time', models.TimeField(verbose_name='End Time')),
                ('slot_type', models.CharField(choices=[('work', 'Work'), ('vacation', 'Vacation'), ('sick', 'Sick Leave'), ('dayoff', 'Day Off'), ('substitution', 'Substitution')], default='work', max_length=20, verbose_name='Slot Type')),
                ('comment', models.CharField(blank=True, max_length=255, verbose_name='Comment')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Employee Work Slot',
                'verbose_name_plural': 'Employee Work Slots',
                'ordering': ['date', 'start_time'],
            },
        ),
        migrations.CreateModel(
            name='ManagerTransferInvite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_accepted', models.BooleanField(default=False, verbose_name='Accepted')),
                ('is_declined', models.BooleanField(default=False, verbose_name='Declined')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('accepted_at', models.DateTimeField(blank=True, null=True, verbose_name='Accepted at')),
                ('declined_at', models.DateTimeField(blank=True, null=True, verbose_name='Declined at')),
            ],
            options={
                'verbose_name': 'Manager transfer invite',
                'verbose_name_plural': 'Manager transfer invites',
            },
        ),
        migrations.CreateModel(
            name='PatternDay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weekday', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], verbose_name='Day Of Week')),
                ('start_time', models.TimeField(blank=True, null=True)),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('is_day_off', models.BooleanField(default=False, help_text='Whether this is a day off', verbose_name='Is Day Off')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Pattern Day',
                'verbose_name_plural': 'Pattern Days',
                'ordering': ['pattern', 'weekday'],
            },
        ),
        migrations.CreateModel(
            name='Provider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the provider', max_length=200, verbose_name='Name')),
                ('description', models.TextField(help_text='Description of the provider', verbose_name='Description')),
                ('address', models.CharField(blank=True, help_text='Legacy address field for backward compatibility', max_length=200, verbose_name='Address')),
                ('point', django.contrib.gis.db.models.fields.PointField(blank=True, null=True, srid=4326, verbose_name='Point')),
                ('phone_number', models.CharField(help_text='Contact phone number', max_length=20, verbose_name='Phone Number')),
                ('email', models.EmailField(help_text='Contact email', max_length=254, verbose_name='Email')),
                ('website', models.URLField(blank=True, help_text='Provider website', verbose_name='Website')),
                ('logo', models.ImageField(blank=True, help_text='Provider logo', null=True, upload_to='providers/logos/%Y/%m/%d/', verbose_name='Logo')),
                ('rating', models.FloatField(default=0.0, help_text='Provider rating', verbose_name='Rating')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the provider is currently active', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('exclude_from_blocking_checks', models.BooleanField(default=False, help_text='Whether this provider should be excluded from automatic blocking checks', verbose_name='Exclude From Blocking Checks')),
                ('blocking_exclusion_reason', models.TextField(blank=True, help_text='Reason for excluding this provider from blocking checks', verbose_name='Blocking Exclusion Reason')),
            ],
            options={
                'verbose_name': 'Provider',
                'verbose_name_plural': 'Providers',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='ProviderSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weekday', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], verbose_name='Day Of Week')),
                ('open_time', models.TimeField(blank=True, null=True, verbose_name='Open Time')),
                ('close_time', models.TimeField(blank=True, null=True, verbose_name='Close Time')),
                ('is_closed', models.BooleanField(default=False, help_text='Whether the provider is closed on this day', verbose_name='Is Closed')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Provider Schedule',
                'verbose_name_plural': 'Provider Schedules',
            },
        ),
        migrations.CreateModel(
            name='ProviderService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('price', models.DecimalField(decimal_places=2, help_text='Price of the service at this provider', max_digits=10, verbose_name='Price')),
                ('duration_minutes', models.PositiveIntegerField(help_text='Duration of the service in minutes for this provider', verbose_name='Duration In Minutes')),
                ('tech_break_minutes', models.PositiveIntegerField(default=0, help_text='Technical break time in minutes after the service (for cleaning, preparation, etc.)', verbose_name='Technical Break Minutes')),
                ('base_price', models.DecimalField(decimal_places=2, help_text='Base price for the service at this provider', max_digits=10, verbose_name='Base Price')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this service is currently available', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Provider Service',
                'verbose_name_plural': 'Provider Services',
                'ordering': ['provider', 'service'],
            },
        ),
        migrations.CreateModel(
            name='Schedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.PositiveSmallIntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], help_text='Day of the week', verbose_name='Day Of Week')),
                ('start_time', models.TimeField(help_text='Start time of the working day', verbose_name='Start Time')),
                ('end_time', models.TimeField(help_text='End time of the working day', verbose_name='End Time')),
                ('break_start', models.TimeField(blank=True, help_text='Start time of the break', null=True, verbose_name='Break Start')),
                ('break_end', models.TimeField(blank=True, help_text='End time of the break', null=True, verbose_name='Break End')),
                ('is_working', models.BooleanField(default=True, help_text='Whether the employee works on this day', verbose_name='Is Working')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Schedule',
                'verbose_name_plural': 'Schedules',
                'ordering': ['employee', 'day_of_week'],
            },
        ),
        migrations.CreateModel(
            name='SchedulePattern',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Schedule Pattern',
                'verbose_name_plural': 'Schedule Patterns',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('position', models.CharField(help_text='Employee position', max_length=100, verbose_name='Position')),
                ('bio', models.TextField(blank=True, help_text='Employee biography', verbose_name='Bio')),
                ('photo', models.ImageField(blank=True, help_text='Employee photo', null=True, upload_to='employees/photos/%Y/%m/%d/', verbose_name='Photo')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the employee is currently active', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('services', models.ManyToManyField(help_text='Services this employee can provide', to='catalog.service', verbose_name='Services')),
                ('user', models.OneToOneField(help_text='User account of the employee', on_delete=django.db.models.deletion.CASCADE, related_name='employee_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Employee',
                'verbose_name_plural': 'Employees',
                'ordering': ['user__last_name', 'user__first_name'],
            },
        ),
    ]
