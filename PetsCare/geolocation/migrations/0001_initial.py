# Generated by Django 5.2.5 on 2025-09-15 12:57

import django.contrib.gis.db.models.fields
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('point', django.contrib.gis.db.models.fields.PointField(srid=4326, verbose_name='Point')),
                ('address', models.CharField(max_length=255, verbose_name='Address')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='City')),
                ('country', models.CharField(blank=True, max_length=100, verbose_name='Country')),
                ('postal_code', models.CharField(blank=True, max_length=20, verbose_name='Postal Code')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Location',
                'verbose_name_plural': 'Locations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LocationHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('point', django.contrib.gis.db.models.fields.PointField(srid=4326, verbose_name='Point')),
                ('address', models.CharField(max_length=255, verbose_name='Address')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='City')),
                ('country', models.CharField(blank=True, max_length=100, verbose_name='Country')),
                ('postal_code', models.CharField(blank=True, max_length=20, verbose_name='Postal Code')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
            ],
            options={
                'verbose_name': 'Location History',
                'verbose_name_plural': 'Location History',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SearchRadius',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('radius', models.PositiveIntegerField(verbose_name='Radius In Meters')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
            ],
            options={
                'verbose_name': 'Search Radius',
                'verbose_name_plural': 'Search Radii',
                'ordering': ['radius'],
            },
        ),
        migrations.CreateModel(
            name='UserLocation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('point', django.contrib.gis.db.models.fields.PointField(srid=4326, verbose_name='Point')),
                ('accuracy', models.FloatField(blank=True, help_text='Location accuracy in meters', null=True, verbose_name='Accuracy')),
                ('source', models.CharField(choices=[('device', 'Device GPS'), ('map', 'Map Selection'), ('manual', 'Manual Input')], default='device', help_text='Source of location data', max_length=20, verbose_name='Source')),
                ('last_updated', models.DateTimeField(auto_now=True, verbose_name='Last Updated')),
            ],
            options={
                'verbose_name': 'User Location',
                'verbose_name_plural': 'User Locations',
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(blank=True, max_length=100, verbose_name='Country')),
                ('region', models.CharField(blank=True, max_length=100, verbose_name='Region')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='City')),
                ('district', models.CharField(blank=True, max_length=100, verbose_name='District')),
                ('street', models.CharField(blank=True, max_length=200, verbose_name='Street')),
                ('house_number', models.CharField(blank=True, max_length=20, verbose_name='House Number')),
                ('building', models.CharField(blank=True, max_length=20, verbose_name='Building')),
                ('apartment', models.CharField(blank=True, max_length=20, verbose_name='Apartment')),
                ('postal_code', models.CharField(blank=True, max_length=20, verbose_name='Postal Code')),
                ('formatted_address', models.TextField(blank=True, verbose_name='Formatted Address')),
                ('point', django.contrib.gis.db.models.fields.PointField(srid=4326, verbose_name='Point')),
                ('validation_status', models.CharField(choices=[('pending', 'Pending'), ('valid', 'Valid'), ('invalid', 'Invalid'), ('error', 'Error')], default='pending', max_length=20, verbose_name='Validation Status')),
                ('geocoding_accuracy', models.CharField(blank=True, max_length=50, verbose_name='Geocoding Accuracy')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('validated_at', models.DateTimeField(blank=True, null=True, verbose_name='Validated At')),
            ],
            options={
                'verbose_name': 'Address',
                'verbose_name_plural': 'Addresses',
                'db_table': 'geolocation_address',
                'indexes': [models.Index(fields=['point'], name='idx_address_coordinates'), models.Index(fields=['point', 'validation_status'], name='idx_address_coordinates_status'), models.Index(fields=['validation_status'], name='idx_address_validation_status'), models.Index(fields=['city', 'region'], name='idx_address_city_region'), models.Index(fields=['postal_code'], name='idx_address_postal_code')],
            },
        ),
        migrations.CreateModel(
            name='AddressCache',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cache_key', models.CharField(help_text='Hash of the address for caching', max_length=64, unique=True, verbose_name='Cache Key')),
                ('address_data', models.JSONField(help_text='Cached address data from API', verbose_name='Address Data')),
                ('api_provider', models.CharField(default='google_maps', help_text='API provider used for this cache entry', max_length=50, verbose_name='API Provider')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('expires_at', models.DateTimeField(help_text='When this cache entry expires', verbose_name='Expires At')),
                ('hit_count', models.PositiveIntegerField(default=0, help_text='Number of times this cache entry was used', verbose_name='Hit Count')),
            ],
            options={
                'verbose_name': 'Address Cache',
                'verbose_name_plural': 'Address Cache',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['cache_key'], name='geolocation_cache_k_7364bd_idx'), models.Index(fields=['expires_at'], name='geolocation_expires_ae65a8_idx')],
            },
        ),
        migrations.CreateModel(
            name='AddressValidation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_valid', models.BooleanField(default=False, help_text='Whether the address is valid', verbose_name='Is Valid')),
                ('confidence_score', models.DecimalField(blank=True, decimal_places=2, help_text='Confidence score from validation (0.00-1.00)', max_digits=3, null=True, verbose_name='Confidence Score')),
                ('validation_errors', models.JSONField(blank=True, default=list, help_text='List of validation errors found', verbose_name='Validation Errors')),
                ('suggestions', models.JSONField(blank=True, default=list, help_text='Suggested corrections for the address', verbose_name='Suggestions')),
                ('api_provider', models.CharField(default='google_maps', help_text='API provider used for validation', max_length=50, verbose_name='API Provider')),
                ('api_response', models.JSONField(blank=True, default=dict, help_text='Raw response from geocoding API', verbose_name='API Response')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('processing_time', models.DurationField(blank=True, help_text='Time taken to validate the address', null=True, verbose_name='Processing Time')),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='geolocation.address', verbose_name='Address')),
            ],
            options={
                'verbose_name': 'Address Validation',
                'verbose_name_plural': 'Address Validations',
                'ordering': ['-created_at'],
            },
        ),
    ]
