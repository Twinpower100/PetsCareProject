# Generated by Django 5.2.5 on 2025-09-15 12:57

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(help_text='Unique technical code (Latin letters, numbers, underscores). Used for integrations and business logic.', max_length=50, unique=True, validators=[django.core.validators.RegexValidator(message='Code must contain only Latin letters, numbers and underscores.', regex='^[a-zA-Z0-9_]+$')], verbose_name='Code')),
                ('name', models.CharField(help_text='Name of the service or category', max_length=200, verbose_name='Name')),
                ('level', models.PositiveIntegerField(default=0, help_text='Level in the hierarchy', verbose_name='Level')),
                ('description', models.TextField(blank=True, help_text='Description of the service or category', verbose_name='Description')),
                ('icon', models.CharField(blank=True, help_text='Icon class or identifier', max_length=50, verbose_name='Icon')),
                ('is_mandatory', models.BooleanField(default=False, help_text='Whether this service is mandatory for pets', verbose_name='Is Mandatory')),
                ('is_periodic', models.BooleanField(default=False, help_text='Whether this service needs to be repeated periodically', verbose_name='Is Periodic')),
                ('period_days', models.PositiveIntegerField(blank=True, help_text='Number of days between periodic procedures', null=True, verbose_name='Period In Days')),
                ('send_reminders', models.BooleanField(default=False, help_text='Whether to send reminders for this service', verbose_name='Send Reminders')),
                ('reminder_days_before', models.PositiveIntegerField(blank=True, help_text='Days before the procedure to send a reminder', null=True, verbose_name='Reminder Days Before')),
                ('requires_license', models.BooleanField(default=False, help_text='Whether this service requires special licensing or certification', verbose_name='Requires License')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the service or category is currently active', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('parent', models.ForeignKey(blank=True, help_text='Parent service or category in the hierarchy', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='catalog.service', verbose_name='Parent')),
            ],
            options={
                'verbose_name': 'Service',
                'verbose_name_plural': 'Services',
                'ordering': ['level', 'name'],
                'indexes': [models.Index(fields=['parent', 'level'], name='catalog_ser_parent__b08d96_idx'), models.Index(fields=['level'], name='catalog_ser_level_4e09e9_idx')],
            },
        ),
    ]
