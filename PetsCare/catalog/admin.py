"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è catalog.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è:
1. –£—Å–ª—É–≥ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥
"""

from django.contrib import admin
from django.utils.translation import gettext_lazy as _
from django.utils.html import format_html
from django.urls import reverse
from django.utils.safestring import mark_safe
from django.db import transaction
from .models import Service
from custom_admin import custom_admin_site


@admin.register(Service)
class ServiceAdmin(admin.ModelAdmin):
    """
    –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É—Å–ª—É–≥ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —É—Å–ª—É–≥.
    
    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
    - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–æ–ª–µ–π –≤ —Å–ø–∏—Å–∫–µ
    - –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é
    - –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    - –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ–ª–µ–π –≤ —Ñ–æ—Ä–º–µ
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å (level)
    - –ò—Å–∫–ª—é—á–µ–Ω–∏–µ —Å–∞–º–æ–π —É—Å–ª—É–≥–∏ –∏–∑ parent
    """
    list_display = ['get_tree_name', 'get_full_path', 'code', 'parent', 'level', 'hierarchy_order', 'is_active', 'is_mandatory', 'is_periodic', 'requires_license', 'get_allowed_pet_types']
    list_filter = ['level', 'is_active', 'is_mandatory', 'is_periodic', 'requires_license', 'allowed_pet_types']
    search_fields = ['code', 'name', 'name_en', 'name_ru', 'name_me', 'name_de', 'description', 'description_en', 'description_ru', 'description_me', 'description_de']
    ordering = ['hierarchy_order', 'name']
    readonly_fields = ['level', 'hierarchy_order', 'version']
    fieldsets = (
        (_('Basic Information'), {
            'fields': (
                'code',
                'name',
                'name_en',
                'name_ru',
                'name_me',
                'name_de',
                'description',
                'description_en',
                'description_ru',
                'description_me',
                'description_de',
                'parent',
                'icon',
            )
        }),
        (_('Status'), {
            'fields': (
                'is_active',
                'is_mandatory',
                'is_periodic',
                'requires_license'
            )
        }),
        (_('Pet Types'), {
            'fields': (
                'allowed_pet_types',
            ),
            'description': _('Select pet types this service is available for. Leave empty to make it available for all types.')
        }),
        (_('Periodic Settings'), {
            'fields': (
                'period_days',
                'send_reminders',
                'reminder_days_before'
            ),
            'classes': ('collapse',)
        }),
        (_('Hierarchy'), {
            'fields': (
                'level',
                'hierarchy_order',
                'version',
            ),
            'classes': ('collapse',)
        })
    )
    
    def get_queryset(self, request):
        """
        –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π.
        –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ –ø–æ–ª—é hierarchy_order.
        """
        return super().get_queryset(request).select_related('parent').prefetch_related('allowed_pet_types')
    
    @transaction.atomic
    def save_model(self, request, obj, form, change):
        """
        –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ–π –∑–∞—â–∏—Ç–æ–π.
        """
        from django.core.exceptions import ValidationError
        
        try:
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if change and obj.pk:
                try:
                    current = Service.objects.select_for_update().get(pk=obj.pk)
                    if current.version != obj.version:
                        raise ValidationError(_('Record was modified by another user. Please refresh and try again.'))
                except Service.DoesNotExist:
                    raise ValidationError(_('Record was deleted by another user.'))
            
            super().save_model(request, obj, form, change)
        except ValidationError as e:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            from django.contrib import messages
            messages.error(request, str(e))
            return
    
    def get_tree_name(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –¥–ª—è –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã.
        """
        # –°–æ–∑–¥–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
        indent = "&nbsp;&nbsp;&nbsp;&nbsp;" * obj.level
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
        if obj.level == 0:
            icon = "üìÅ"  # –ü–∞–ø–∫–∞ –¥–ª—è –∫–æ—Ä–Ω–µ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        elif obj.children.exists():
            icon = "üìÇ"  # –ü–∞–ø–∫–∞ –¥–ª—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        else:
            icon = "üìÑ"  # –§–∞–π–ª –¥–ª—è —É—Å–ª—É–≥
        
        # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        url = reverse('admin:catalog_service_change', args=[obj.pk])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏ –∏ –∏–∫–æ–Ω–∫–æ–π
        tree_name = f"{indent}{icon} {obj.name}"
        
        # –î–æ–±–∞–≤–ª—è–µ–º CSS –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
        css_class = f"level-{obj.level}"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è
        if obj.level == 0:
            style = "text-decoration: none; font-weight: bold; color: #2c3e50; font-family: monospace;"
        elif obj.level == 1:
            style = "text-decoration: none; color: #34495e; font-family: monospace;"
        elif obj.level == 2:
            style = "text-decoration: none; color: #7f8c8d; font-family: monospace;"
        else:
            style = "text-decoration: none; color: #bdc3c7; font-family: monospace;"
        
        return format_html(
            '<a href="{}" class="{}" style="{}">{}</a>',
            url,
            css_class,
            style,
            mark_safe(tree_name)
        )
    get_tree_name.short_description = _('Name (Tree)')
    get_tree_name.admin_order_field = 'name'
    
    def get_full_path(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —É—Å–ª—É–≥–µ –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏.
        """
        return obj.get_full_path()
    get_full_path.short_description = _('Full Path')
    get_full_path.admin_order_field = 'name'
    
    def get_allowed_pet_types(self, obj):
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–∏–ø—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö –¥–ª—è —É—Å–ª—É–≥–∏.
        """
        if not obj.allowed_pet_types.exists():
            return _("All types")
        return ", ".join([pet_type.name for pet_type in obj.allowed_pet_types.all()])
    get_allowed_pet_types.short_description = _('Allowed Pet Types')
    
    def formfield_for_foreignkey(self, db_field, request, **kwargs):
        """
        –í –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ parent –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—É —É—Å–ª—É–≥—É (–ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏).
        """
        if db_field.name == "parent":
            if request.resolver_match and request.resolver_match.kwargs.get('object_id'):
                # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –∏—Å–∫–ª—é—á–∞–µ–º —Å–∞–º—É —É—Å–ª—É–≥—É
                object_id = request.resolver_match.kwargs['object_id']
                kwargs["queryset"] = Service.objects.exclude(pk=object_id)
            else:
                kwargs["queryset"] = Service.objects.all()
        return super().formfield_for_foreignkey(db_field, request, **kwargs)
    


custom_admin_site.register(Service, ServiceAdmin)
