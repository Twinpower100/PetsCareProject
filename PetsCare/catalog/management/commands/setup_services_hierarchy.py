"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —É—Å–ª—É–≥.

–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–æ–∑–¥–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–µ—Ä–∞—Ä—Ö–∏—é —É—Å–ª—É–≥:
- –ì—Ä—É–º–∏–Ω–≥–æ–≤—ã–µ —É—Å–ª—É–≥–∏ (–∫–æ—Ä–Ω–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è)
  - Hair Cutting (—É—Å–ª—É–≥–∞)
  - Nail trimming (—É—Å–ª—É–≥–∞)
- –í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏ (–∫–æ—Ä–Ω–µ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è)
  - –ü—Ä–∏–≤–∏–≤–∫–∏ (–ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è)
    - –ü—Ä–∏–≤–∏–≤–∫–∞ –æ—Ç –±–µ—à–µ–Ω—Å—Ç–≤–∞ (—É—Å–ª—É–≥–∞)
    - –ü—Ä–∏–≤–∏–≤–∫–∞ –æ—Ç —á—É–º–∫–∏ (—É—Å–ª—É–≥–∞)
"""

from django.core.management.base import BaseCommand
from catalog.models import Service
from pets.models import PetType


class Command(BaseCommand):
    help = '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —É—Å–ª—É–≥'

    def handle(self, *args, **options):
        self.stdout.write('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —É—Å–ª—É–≥...')
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö
        try:
            dog_type = PetType.objects.get(code='dog')
            cat_type = PetType.objects.get(code='cat')
        except PetType.DoesNotExist:
            self.stdout.write(
                self.style.ERROR('–¢–∏–ø—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö "dog" –∏ "cat" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–æ–∑–¥–∞–π—Ç–µ –∏—Ö —Å–Ω–∞—á–∞–ª–∞.')
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        grooming, created = Service.objects.get_or_create(
            code='grooming',
            defaults={
                'name': '–ì—Ä—É–º–∏–Ω–≥–æ–≤—ã–µ —É—Å–ª—É–≥–∏',
                'description': '–£—Å–ª—É–≥–∏ –ø–æ —É—Ö–æ–¥—É –∑–∞ –≤–Ω–µ—à–Ω–∏–º –≤–∏–¥–æ–º –ø–∏—Ç–æ–º—Ü–µ–≤',
                'is_active': True,
            }
        )
        if created:
            self.stdout.write(f'–°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {grooming.name}')
        
        veterinary, created = Service.objects.get_or_create(
            code='veterinary',
            defaults={
                'name': '–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏',
                'description': '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏ –¥–ª—è –ø–∏—Ç–æ–º—Ü–µ–≤',
                'is_active': True,
            }
        )
        if created:
            self.stdout.write(f'–°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {veterinary.name}')
        
        # –°–æ–∑–¥–∞–µ–º —É—Å–ª—É–≥–∏ –≥—Ä—É–º–∏–Ω–≥–∞
        hair_cutting, created = Service.objects.get_or_create(
            code='hair_cutting',
            defaults={
                'name': 'Hair Cutting',
                'description': '–°—Ç—Ä–∏–∂–∫–∞ —à–µ—Ä—Å—Ç–∏',
                'parent': grooming,
                'is_active': True,
            }
        )
        if created:
            self.stdout.write(f'–°–æ–∑–¥–∞–Ω–∞ —É—Å–ª—É–≥–∞: {hair_cutting.name}')
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ç–∏–ø—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö –¥–ª—è Hair Cutting
        hair_cutting.allowed_pet_types.set([dog_type, cat_type])
        
        nail_trimming, created = Service.objects.get_or_create(
            code='nail_trimming',
            defaults={
                'name': 'Nail trimming',
                'description': '–°—Ç—Ä–∏–∂–∫–∞ –∫–æ–≥—Ç–µ–π',
                'parent': grooming,
                'is_active': True,
            }
        )
        if created:
            self.stdout.write(f'–°–æ–∑–¥–∞–Ω–∞ —É—Å–ª—É–≥–∞: {nail_trimming.name}')
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ç–∏–ø—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö –¥–ª—è Nail trimming
        nail_trimming.allowed_pet_types.set([dog_type, cat_type])
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é "–ü—Ä–∏–≤–∏–≤–∫–∏"
        vaccinations, created = Service.objects.get_or_create(
            code='vaccinations',
            defaults={
                'name': '–ü—Ä–∏–≤–∏–≤–∫–∏',
                'description': '–í–∞–∫—Ü–∏–Ω–∞—Ü–∏—è –ø–∏—Ç–æ–º—Ü–µ–≤',
                'parent': veterinary,
                'is_active': True,
            }
        )
        if created:
            self.stdout.write(f'–°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è: {vaccinations.name}')
        
        # –°–æ–∑–¥–∞–µ–º —É—Å–ª—É–≥–∏ –ø—Ä–∏–≤–∏–≤–æ–∫
        rabies_vaccination, created = Service.objects.get_or_create(
            code='rabies_vaccination',
            defaults={
                'name': '–ü—Ä–∏–≤–∏–≤–∫–∞ –æ—Ç –±–µ—à–µ–Ω—Å—Ç–≤–∞',
                'description': '–í–∞–∫—Ü–∏–Ω–∞—Ü–∏—è –æ—Ç –±–µ—à–µ–Ω—Å—Ç–≤–∞',
                'parent': vaccinations,
                'is_periodic': True,
                'period_days': 365,
                'send_reminders': True,
                'reminder_days_before': 30,
                'is_mandatory': True,
                'is_active': True,
            }
        )
        if created:
            self.stdout.write(f'–°–æ–∑–¥–∞–Ω–∞ —É—Å–ª—É–≥–∞: {rabies_vaccination.name}')
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ç–∏–ø—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–≤–∏–≤–∫–∏ –æ—Ç –±–µ—à–µ–Ω—Å—Ç–≤–∞
        rabies_vaccination.allowed_pet_types.set([dog_type, cat_type])
        
        distemper_vaccination, created = Service.objects.get_or_create(
            code='distemper_vaccination',
            defaults={
                'name': '–ü—Ä–∏–≤–∏–≤–∫–∞ –æ—Ç —á—É–º–∫–∏',
                'description': '–í–∞–∫—Ü–∏–Ω–∞—Ü–∏—è –æ—Ç —á—É–º–∫–∏',
                'parent': vaccinations,
                'is_periodic': True,
                'period_days': 365,
                'send_reminders': True,
                'reminder_days_before': 30,
                'is_mandatory': True,
                'is_active': True,
            }
        )
        if created:
            self.stdout.write(f'–°–æ–∑–¥–∞–Ω–∞ —É—Å–ª—É–≥–∞: {distemper_vaccination.name}')
        
        # –ù–∞–∑–Ω–∞—á–∞–µ–º —Ç–∏–ø—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö –¥–ª—è –ø—Ä–∏–≤–∏–≤–∫–∏ –æ—Ç —á—É–º–∫–∏
        distemper_vaccination.allowed_pet_types.set([dog_type])
        
        # –°–æ–∑–¥–∞–µ–º —É—Å–ª—É–≥—É "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞" –Ω–∞–ø—Ä—è–º—É—é –ø–æ–¥ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–º–∏ —É—Å–ª—É–≥–∞–º–∏
        diagnostics, created = Service.objects.get_or_create(
            code='diagnostics',
            defaults={
                'name': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞',
                'description': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏',
                'parent': veterinary,
                'is_active': True,
            }
        )
        if created:
            self.stdout.write(f'–°–æ–∑–¥–∞–Ω–∞ —É—Å–ª—É–≥–∞: {diagnostics.name}')
        
        self.stdout.write(
            self.style.SUCCESS('–ò–µ—Ä–∞—Ä—Ö–∏—è —É—Å–ª—É–≥ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!')
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        self.stdout.write('\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:')
        self._print_tree()
    
    def _print_tree(self):
        """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ä–µ–≤–æ —É—Å–ª—É–≥ –≤ –∫–æ–Ω—Å–æ–ª—å."""
        root_services = Service.objects.filter(parent=None).order_by('name')
        
        for root in root_services:
            self.stdout.write(f'üìÅ {root.name}')
            self._print_children(root, 1)
    
    def _print_children(self, parent, level):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–≤–æ–¥–∏—Ç –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã."""
        children = Service.objects.filter(parent=parent).order_by('name')
        indent = '    ' * level
        
        for child in children:
            if child.children.exists():
                icon = 'üìÇ'
            else:
                icon = 'üìÑ'
            
            self.stdout.write(f'{indent}{icon} {child.name}')
            self._print_children(child, level + 1)
