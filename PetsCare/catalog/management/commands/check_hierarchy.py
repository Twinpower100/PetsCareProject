"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —É—Å–ª—É–≥.
"""

from django.core.management.base import BaseCommand
from catalog.models import Service


class Command(BaseCommand):
    help = '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —É—Å–ª—É–≥'

    def handle(self, *args, **options):
        self.stdout.write('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —É—Å–ª—É–≥...')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Hair Cutting –∏ Nail trimming –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ Grooming
        try:
            grooming = Service.objects.get(code='grooming')
            hair_cutting = Service.objects.get(code='hair_cutting')
            nail_trimming = Service.objects.get(code='nail_trimming')
            
            self.stdout.write(f'Grooming: {grooming.name}')
            self.stdout.write(f'Hair Cutting parent: {hair_cutting.parent.name if hair_cutting.parent else "None"}')
            self.stdout.write(f'Nail trimming parent: {nail_trimming.parent.name if nail_trimming.parent else "None"}')
            
            if hair_cutting.parent == grooming and nail_trimming.parent == grooming:
                self.stdout.write(
                    self.style.SUCCESS('‚úì Hair Cutting –∏ Nail trimming –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ Grooming')
                )
            else:
                self.stdout.write(
                    self.style.ERROR('‚úó Hair Cutting –∏ Nail trimming –ù–ï –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ Grooming')
                )
                
        except Service.DoesNotExist as e:
            self.stdout.write(
                self.style.ERROR(f'–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {e}')
            )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        self.stdout.write('\n–ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Å–ª—É–≥:')
        self._print_tree()
    
    def _print_tree(self):
        """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ä–µ–≤–æ —É—Å–ª—É–≥ –≤ –∫–æ–Ω—Å–æ–ª—å."""
        root_services = Service.objects.filter(parent=None).order_by('name')
        
        for root in root_services:
            self.stdout.write(f'üìÅ {root.name} (level: {root.level})')
            self._print_children(root, 1)
    
    def _print_children(self, parent, level):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–≤–æ–¥–∏—Ç –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã."""
        children = Service.objects.filter(parent=parent).order_by('name')
        indent = '    ' * level
        
        for child in children:
            if child.children.exists():
                icon = 'üìÇ'
            else:
                icon = 'üìÑ'
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø—ã –∂–∏–≤–æ—Ç–Ω—ã—Ö –¥–ª—è —É—Å–ª—É–≥
            pet_types = ', '.join([pt.name for pt in child.allowed_pet_types.all()])
            if not pet_types:
                pet_types = 'All types'
            
            self.stdout.write(f'{indent}{icon} {child.name} (level: {child.level}, pets: {pet_types})')
            self._print_children(child, level + 1)
