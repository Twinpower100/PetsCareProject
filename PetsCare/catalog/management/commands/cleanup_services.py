"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —É—Å–ª—É–≥.
"""

from django.core.management.base import BaseCommand
from catalog.models import Service


class Command(BaseCommand):
    help = '–û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —É—Å–ª—É–≥'

    def handle(self, *args, **options):
        self.stdout.write('–û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —É—Å–ª—É–≥...')
        
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â—É—é—Å—è —É—Å–ª—É–≥—É "–ü—Ä–∏–≤–∏–≤–∫–∏" (–æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π "Vaccination")
        try:
            duplicate_vaccinations = Service.objects.filter(
                name='–ü—Ä–∏–≤–∏–≤–∫–∏',
                parent__name='–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏'
            ).exclude(code='vaccinations')
            
            for service in duplicate_vaccinations:
                self.stdout.write(f'–£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â—É—é—Å—è —É—Å–ª—É–≥—É: {service.name}')
                service.delete()
                
        except Exception as e:
            self.stdout.write(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è —É—Å–ª—É–≥: {e}')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é
        self._fix_hierarchy()
        
        self.stdout.write(
            self.style.SUCCESS('–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        self.stdout.write('\n–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞:')
        self._print_tree()
    
    def _fix_hierarchy(self):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—é —É—Å–ª—É–≥."""
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ Hair Cutting –∏ Nail trimming –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ Grooming
        try:
            grooming = Service.objects.get(code='grooming')
            hair_cutting = Service.objects.get(code='hair_cutting')
            nail_trimming = Service.objects.get(code='nail_trimming')
            
            if hair_cutting.parent != grooming:
                hair_cutting.parent = grooming
                hair_cutting.save()
                self.stdout.write('–ò—Å–ø—Ä–∞–≤–ª–µ–Ω parent –¥–ª—è Hair Cutting')
            
            if nail_trimming.parent != grooming:
                nail_trimming.parent = grooming
                nail_trimming.save()
                self.stdout.write('–ò—Å–ø—Ä–∞–≤–ª–µ–Ω parent –¥–ª—è Nail trimming')
                
        except Service.DoesNotExist as e:
            self.stdout.write(f'–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {e}')
    
    def _print_tree(self):
        """–í—ã–≤–æ–¥–∏—Ç –¥–µ—Ä–µ–≤–æ —É—Å–ª—É–≥ –≤ –∫–æ–Ω—Å–æ–ª—å."""
        root_services = Service.objects.filter(parent=None).order_by('name')
        
        for root in root_services:
            self.stdout.write(f'üìÅ {root.name}')
            self._print_children(root, 1)
    
    def _print_children(self, parent, level):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –≤—ã–≤–æ–¥–∏—Ç –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã."""
        children = Service.objects.filter(parent=parent).order_by('name')
        indent = '    ' * level
        
        for child in children:
            if child.children.exists():
                icon = 'üìÇ'
            else:
                icon = 'üìÑ'
            
            self.stdout.write(f'{indent}{icon} {child.name}')
            self._print_children(child, level + 1)
