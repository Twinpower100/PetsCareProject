"""
–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API.

–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:
- –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å OpenAPI —Å—Ö–µ–º—ã
- –ù–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö endpoints
- –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–π –∏ –ø—Ä–∏–º–µ—Ä–æ–≤
- –í–∞–ª–∏–¥–Ω–æ—Å—Ç—å JSON —Å—Ö–µ–º—ã
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python manage.py validate_api_docs
    python manage.py validate_api_docs --verbose
    python manage.py validate_api_docs --fix
"""

import json
import yaml
from pathlib import Path
from django.core.management.base import BaseCommand, CommandError
from django.conf import settings
from drf_yasg.generators import OpenAPISchemaGenerator
from drf_yasg import openapi
from rest_framework import permissions


class Command(BaseCommand):
    """
    –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API.
    """
    
    help = '–í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API'
    
    def add_arguments(self, parser):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
        """
        parser.add_argument(
            '--verbose',
            action='store_true',
            help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
        )
        parser.add_argument(
            '--fix',
            action='store_true',
            help='–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º'
        )
        parser.add_argument(
            '--output',
            type=str,
            help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞'
        )
        parser.add_argument(
            '--format',
            type=str,
            choices=['json', 'yaml', 'text'],
            default='text',
            help='–§–æ—Ä–º–∞—Ç –æ—Ç—á–µ—Ç–∞'
        )
    
    def handle(self, *args, **options):
        """
        –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã.
        """
        verbose = options['verbose']
        fix = options['fix']
        output_file = options['output']
        report_format = options['format']
        
        self.stdout.write(self.style.SUCCESS('üîç –ù–∞—á–∏–Ω–∞—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ API...'))
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Ö–µ–º—ã
        schema_generator = OpenAPISchemaGenerator()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É
        try:
            schema = schema_generator.get_schema()
            schema_dict = schema.to_dict()
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ö–µ–º—ã: {e}')
            )
            return
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        validation_results = {
            'total_checks': 0,
            'passed_checks': 0,
            'failed_checks': 0,
            'warnings': 0,
            'errors': [],
            'warnings_list': [],
            'details': {}
        }
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
        self._validate_basic_structure(schema_dict, validation_results, verbose)
        self._validate_endpoints(schema_dict, validation_results, verbose)
        self._validate_authentication(schema_dict, validation_results, verbose)
        self._validate_responses(schema_dict, validation_results, verbose)
        self._validate_parameters(schema_dict, validation_results, verbose)
        self._validate_schemas(schema_dict, validation_results, verbose)
        self._validate_security(schema_dict, validation_results, verbose)
        self._validate_documentation_files(validation_results, verbose)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self._print_results(validation_results, verbose)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        if output_file:
            self._save_report(validation_results, output_file, report_format)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
        if validation_results['failed_checks'] > 0:
            raise CommandError(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞: {validation_results['failed_checks']} –æ—à–∏–±–æ–∫")
    
    def _validate_basic_structure(self, schema_dict, results, verbose):
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—Ö–µ–º—ã.
        """
        if verbose:
            self.stdout.write('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã...')
        
        checks = [
            ('openapi', '–í–µ—Ä—Å–∏—è OpenAPI'),
            ('info', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ API'),
            ('paths', '–ü—É—Ç–∏ API'),
            ('components', '–ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã'),
        ]
        
        for key, description in checks:
            results['total_checks'] += 1
            if key in schema_dict:
                results['passed_checks'] += 1
                if verbose:
                    self.stdout.write(f'  ‚úÖ {description}: OK')
            else:
                results['failed_checks'] += 1
                results['errors'].append(f'–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç {description}')
                if verbose:
                    self.stdout.write(f'  ‚ùå {description}: –û–¢–°–£–¢–°–¢–í–£–ï–¢')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Ä—Å–∏—é OpenAPI
        if 'openapi' in schema_dict:
            results['total_checks'] += 1
            version = schema_dict['openapi']
            if version == '3.0.2':
                results['passed_checks'] += 1
                if verbose:
                    self.stdout.write(f'  ‚úÖ –í–µ—Ä—Å–∏—è OpenAPI: {version}')
            else:
                results['warnings'] += 1
                results['warnings_list'].append(f'–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è OpenAPI: {version}')
                if verbose:
                    self.stdout.write(f'  ‚ö†Ô∏è –í–µ—Ä—Å–∏—è OpenAPI: {version} (–æ–∂–∏–¥–∞–ª–æ—Å—å 3.0.2)')
    
    def _validate_endpoints(self, schema_dict, results, verbose):
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è endpoints.
        """
        if verbose:
            self.stdout.write('üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoints...')
        
        paths = schema_dict.get('paths', {})
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ endpoints
        required_endpoints = {
            '/api/login/': ['post'],
            '/api/register/': ['post'],
            '/api/profile/': ['get', 'put'],
            '/api/pets/': ['get', 'post'],
            '/api/pets/{id}/': ['get', 'put', 'delete'],
            '/api/providers/': ['get', 'post'],
            '/api/providers/{id}/': ['get', 'put'],
            '/api/bookings/': ['get', 'post'],
            '/api/bookings/{id}/': ['get', 'put', 'delete'],
            '/api/bookings/{id}/cancel/': ['post'],
            '/api/payments/': ['get', 'post'],
            '/api/notifications/': ['get'],
            '/api/notifications/{id}/mark-as-read/': ['post'],
            '/api/ratings/': ['get', 'post'],
            '/api/reports/': ['get'],
            '/api/audit/logs/': ['get'],
            '/api/settings/system/': ['get', 'put'],
            '/api/analytics/user-growth/': ['get'],
        }
        
        for endpoint, required_methods in required_endpoints.items():
            results['total_checks'] += 1
            if endpoint in paths:
                endpoint_data = paths[endpoint]
                missing_methods = []
                
                for method in required_methods:
                    if method not in endpoint_data:
                        missing_methods.append(method)
                
                if not missing_methods:
                    results['passed_checks'] += 1
                    if verbose:
                        self.stdout.write(f'  ‚úÖ {endpoint}: OK')
                else:
                    results['failed_checks'] += 1
                    error_msg = f'Endpoint {endpoint} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–µ—Ç–æ–¥—ã: {", ".join(missing_methods)}'
                    results['errors'].append(error_msg)
                    if verbose:
                        self.stdout.write(f'  ‚ùå {endpoint}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –º–µ—Ç–æ–¥—ã {", ".join(missing_methods)}')
            else:
                results['failed_checks'] += 1
                results['errors'].append(f'Endpoint {endpoint} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
                if verbose:
                    self.stdout.write(f'  ‚ùå {endpoint}: –û–¢–°–£–¢–°–¢–í–£–ï–¢')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ endpoints
        total_endpoints = len(paths)
        if total_endpoints < 50:
            results['warnings'] += 1
            results['warnings_list'].append(f'–ú–∞–ª–æ endpoints: {total_endpoints} (–æ–∂–∏–¥–∞–ª–æ—Å—å –±–æ–ª—å—à–µ 50)')
            if verbose:
                self.stdout.write(f'  ‚ö†Ô∏è –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ endpoints: {total_endpoints}')
    
    def _validate_authentication(self, schema_dict, results, verbose):
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
        """
        if verbose:
            self.stdout.write('üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...')
        
        components = schema_dict.get('components', {})
        security_schemes = components.get('securitySchemes', {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Bearer —Ç–æ–∫–µ–Ω
        results['total_checks'] += 1
        if 'Bearer' in security_schemes:
            bearer_scheme = security_schemes['Bearer']
            if bearer_scheme.get('type') == 'http' and bearer_scheme.get('scheme') == 'bearer':
                results['passed_checks'] += 1
                if verbose:
                    self.stdout.write('  ‚úÖ Bearer –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: OK')
            else:
                results['failed_checks'] += 1
                results['errors'].append('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Bearer –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏')
                if verbose:
                    self.stdout.write('  ‚ùå Bearer –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: –ù–ï–ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø')
        else:
            results['failed_checks'] += 1
            results['errors'].append('–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç Bearer –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è')
            if verbose:
                self.stdout.write('  ‚ùå Bearer –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è: –û–¢–°–£–¢–°–¢–í–£–ï–¢')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ endpoints
        paths = schema_dict.get('paths', {})
        protected_endpoints = [
            '/api/profile/',
            '/api/pets/',
            '/api/bookings/',
            '/api/payments/',
        ]
        
        for endpoint in protected_endpoints:
            if endpoint in paths:
                results['total_checks'] += 1
                endpoint_data = paths[endpoint]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ security –¥–ª—è GET –º–µ—Ç–æ–¥–æ–≤
                if 'get' in endpoint_data:
                    security = endpoint_data['get'].get('security', [])
                    if security:
                        results['passed_checks'] += 1
                        if verbose:
                            self.stdout.write(f'  ‚úÖ {endpoint} (GET): –∑–∞—â–∏—â–µ–Ω')
                    else:
                        results['warnings'] += 1
                        results['warnings_list'].append(f'Endpoint {endpoint} (GET) –Ω–µ –∑–∞—â–∏—â–µ–Ω')
                        if verbose:
                            self.stdout.write(f'  ‚ö†Ô∏è {endpoint} (GET): –Ω–µ –∑–∞—â–∏—â–µ–Ω')
    
    def _validate_responses(self, schema_dict, results, verbose):
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤.
        """
        if verbose:
            self.stdout.write('üì§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤...')
        
        paths = schema_dict.get('paths', {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–¥—ã –æ—Ç–≤–µ—Ç–æ–≤
        test_endpoints = [
            '/api/pets/',
            '/api/bookings/',
            '/api/providers/',
        ]
        
        for endpoint in test_endpoints:
            if endpoint in paths:
                endpoint_data = paths[endpoint]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º GET –º–µ—Ç–æ–¥
                if 'get' in endpoint_data:
                    responses = endpoint_data['get'].get('responses', {})
                    
                    required_responses = ['200', '401', '403']
                    for code in required_responses:
                        results['total_checks'] += 1
                        if code in responses:
                            results['passed_checks'] += 1
                            if verbose:
                                self.stdout.write(f'  ‚úÖ {endpoint} (GET) {code}: OK')
                        else:
                            results['warnings'] += 1
                            results['warnings_list'].append(f'Endpoint {endpoint} (GET) –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ—Ç–≤–µ—Ç {code}')
                            if verbose:
                                self.stdout.write(f'  ‚ö†Ô∏è {endpoint} (GET) {code}: –û–¢–°–£–¢–°–¢–í–£–ï–¢')
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º POST –º–µ—Ç–æ–¥
                if 'post' in endpoint_data:
                    responses = endpoint_data['post'].get('responses', {})
                    
                    required_responses = ['201', '400', '401']
                    for code in required_responses:
                        results['total_checks'] += 1
                        if code in responses:
                            results['passed_checks'] += 1
                            if verbose:
                                self.stdout.write(f'  ‚úÖ {endpoint} (POST) {code}: OK')
                        else:
                            results['warnings'] += 1
                            results['warnings_list'].append(f'Endpoint {endpoint} (POST) –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ—Ç–≤–µ—Ç {code}')
                            if verbose:
                                self.stdout.write(f'  ‚ö†Ô∏è {endpoint} (POST) {code}: –û–¢–°–£–¢–°–¢–í–£–ï–¢')
    
    def _validate_parameters(self, schema_dict, results, verbose):
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤.
        """
        if verbose:
            self.stdout.write('üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤...')
        
        paths = schema_dict.get('paths', {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        pagination_endpoints = [
            '/api/pets/',
            '/api/bookings/',
            '/api/providers/',
            '/api/notifications/',
        ]
        
        for endpoint in pagination_endpoints:
            if endpoint in paths and 'get' in paths[endpoint]:
                results['total_checks'] += 1
                parameters = paths[endpoint]['get'].get('parameters', [])
                param_names = [p['name'] for p in parameters]
                
                if 'page' in param_names and 'page_size' in param_names:
                    results['passed_checks'] += 1
                    if verbose:
                        self.stdout.write(f'  ‚úÖ {endpoint}: –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ OK')
                else:
                    results['warnings'] += 1
                    results['warnings_list'].append(f'Endpoint {endpoint} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏')
                    if verbose:
                        self.stdout.write(f'  ‚ö†Ô∏è {endpoint}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞–≥–∏–Ω–∞—Ü–∏–∏')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        test_cases = [
            ('/api/pets/', 'get', 'page', '–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã'),
            ('/api/providers/', 'get', 'search', '–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å'),
        ]
        
        for endpoint, method, param_name, expected_description in test_cases:
            if endpoint in paths and method in paths[endpoint]:
                results['total_checks'] += 1
                parameters = paths[endpoint][method].get('parameters', [])
                
                param_found = False
                for param in parameters:
                    if param['name'] == param_name:
                        param_found = True
                        if 'description' in param:
                            results['passed_checks'] += 1
                            if verbose:
                                self.stdout.write(f'  ‚úÖ {endpoint} {param_name}: –æ–ø–∏—Å–∞–Ω–∏–µ OK')
                        else:
                            results['warnings'] += 1
                            results['warnings_list'].append(f'–ü–∞—Ä–∞–º–µ—Ç—Ä {param_name} –≤ {endpoint} –Ω–µ –∏–º–µ–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
                            if verbose:
                                self.stdout.write(f'  ‚ö†Ô∏è {endpoint} {param_name}: –Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
                        break
                
                if not param_found:
                    results['warnings'] += 1
                    results['warnings_list'].append(f'–ü–∞—Ä–∞–º–µ—Ç—Ä {param_name} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {endpoint}')
                    if verbose:
                        self.stdout.write(f'  ‚ö†Ô∏è {endpoint} {param_name}: –Ω–µ –Ω–∞–π–¥–µ–Ω')
    
    def _validate_schemas(self, schema_dict, results, verbose):
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ö–µ–º –¥–∞–Ω–Ω—ã—Ö.
        """
        if verbose:
            self.stdout.write('üìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º –¥–∞–Ω–Ω—ã—Ö...')
        
        components = schema_dict.get('components', {})
        schemas = components.get('schemas', {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å—Ö–µ–º
        required_schemas = [
            'User',
            'Pet',
            'Provider',
            'Booking',
            'Payment',
            'Notification',
        ]
        
        for schema_name in required_schemas:
            results['total_checks'] += 1
            if schema_name in schemas:
                results['passed_checks'] += 1
                if verbose:
                    self.stdout.write(f'  ‚úÖ –°—Ö–µ–º–∞ {schema_name}: OK')
            else:
                results['warnings'] += 1
                results['warnings_list'].append(f'–°—Ö–µ–º–∞ {schema_name} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
                if verbose:
                    self.stdout.write(f'  ‚ö†Ô∏è –°—Ö–µ–º–∞ {schema_name}: –û–¢–°–£–¢–°–¢–í–£–ï–¢')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å—Ö–µ–º
        for schema_name, schema_data in schemas.items():
            if 'properties' in schema_data:
                properties = schema_data['properties']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è —Å–≤–æ–π—Å—Ç–≤
                for prop_name, prop_data in properties.items():
                    if 'description' not in prop_data:
                        results['warnings'] += 1
                        results['warnings_list'].append(f'–°–≤–æ–π—Å—Ç–≤–æ {prop_name} –≤ —Å—Ö–µ–º–µ {schema_name} –Ω–µ –∏–º–µ–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
    
    def _validate_security(self, schema_dict, results, verbose):
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
        """
        if verbose:
            self.stdout.write('üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if 'security' in schema_dict:
            results['passed_checks'] += 1
            if verbose:
                self.stdout.write('  ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: OK')
        else:
            results['warnings'] += 1
            results['warnings_list'].append('–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏')
            if verbose:
                self.stdout.write('  ‚ö†Ô∏è –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –û–¢–°–£–¢–°–¢–í–£–Æ–¢')
    
    def _validate_documentation_files(self, results, verbose):
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.
        """
        if verbose:
            self.stdout.write('üìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        doc_files = [
            'docs/api_documentation.md',
            'docs/README.md',
            'swagger_config.py',
        ]
        
        for file_path in doc_files:
            results['total_checks'] += 1
            if Path(file_path).exists():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if len(content) > 0:
                        results['passed_checks'] += 1
                        if verbose:
                            self.stdout.write(f'  ‚úÖ {file_path}: OK')
                    else:
                        results['failed_checks'] += 1
                        results['errors'].append(f'–§–∞–π–ª {file_path} –ø—É—Å—Ç–æ–π')
                        if verbose:
                            self.stdout.write(f'  ‚ùå {file_path}: –ü–£–°–¢–û–ô')
            else:
                results['warnings'] += 1
                results['warnings_list'].append(f'–§–∞–π–ª {file_path} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
                if verbose:
                    self.stdout.write(f'  ‚ö†Ô∏è {file_path}: –û–¢–°–£–¢–°–¢–í–£–ï–¢')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º HTML —à–∞–±–ª–æ–Ω
        template_path = 'templates/api_documentation.html'
        results['total_checks'] += 1
        if Path(template_path).exists():
            with open(template_path, 'r', encoding='utf-8') as f:
                content = f.read()
                if 'PetCare API' in content and 'swagger-ui' in content:
                    results['passed_checks'] += 1
                    if verbose:
                        self.stdout.write(f'  ‚úÖ {template_path}: OK')
                else:
                    results['warnings'] += 1
                    results['warnings_list'].append(f'HTML —à–∞–±–ª–æ–Ω {template_path} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤')
                    if verbose:
                        self.stdout.write(f'  ‚ö†Ô∏è {template_path}: –ù–ï–ü–û–õ–ù–´–ô')
        else:
            results['warnings'] += 1
            results['warnings_list'].append(f'HTML —à–∞–±–ª–æ–Ω {template_path} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
            if verbose:
                self.stdout.write(f'  ‚ö†Ô∏è {template_path}: –û–¢–°–£–¢–°–¢–í–£–ï–¢')
    
    def _print_results(self, results, verbose):
        """
        –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏.
        """
        total = results['total_checks']
        passed = results['passed_checks']
        failed = results['failed_checks']
        warnings = results['warnings']
        
        self.stdout.write('\n' + '='*50)
        self.stdout.write('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –í–ê–õ–ò–î–ê–¶–ò–ò')
        self.stdout.write('='*50)
        
        self.stdout.write(f'–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {total}')
        self.stdout.write(f'–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}')
        self.stdout.write(f'–û—à–∏–±–æ–∫: {failed}')
        self.stdout.write(f'–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warnings}')
        
        success_rate = (passed / total * 100) if total > 0 else 0
        self.stdout.write(f'–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {success_rate:.1f}%')
        
        if failed == 0 and warnings == 0:
            self.stdout.write(self.style.SUCCESS('üéâ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!'))
        elif failed == 0:
            self.stdout.write(self.style.WARNING('‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏'))
        else:
            self.stdout.write(self.style.ERROR('‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞'))
        
        # –í—ã–≤–æ–¥–∏–º –æ—à–∏–±–∫–∏
        if results['errors']:
            self.stdout.write('\n‚ùå –û–®–ò–ë–ö–ò:')
            for error in results['errors']:
                self.stdout.write(f'  ‚Ä¢ {error}')
        
        # –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        if results['warnings_list']:
            self.stdout.write('\n‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:')
            for warning in results['warnings_list']:
                self.stdout.write(f'  ‚Ä¢ {warning}')
        
        self.stdout.write('='*50)
    
    def _save_report(self, results, output_file, report_format):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª.
        """
        try:
            if report_format == 'json':
                with open(output_file, 'w', encoding='utf-8') as f:
                    json.dump(results, f, indent=2, ensure_ascii=False)
            elif report_format == 'yaml':
                with open(output_file, 'w', encoding='utf-8') as f:
                    yaml.dump(results, f, default_flow_style=False, allow_unicode=True)
            else:  # text
                with open(output_file, 'w', encoding='utf-8') as f:
                    f.write('–û–¢–ß–ï–¢ –û –í–ê–õ–ò–î–ê–¶–ò–ò API –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò\n')
                    f.write('='*50 + '\n\n')
                    f.write(f'–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {results["total_checks"]}\n')
                    f.write(f'–ü—Ä–æ–π–¥–µ–Ω–æ: {results["passed_checks"]}\n')
                    f.write(f'–û—à–∏–±–æ–∫: {results["failed_checks"]}\n')
                    f.write(f'–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {results["warnings"]}\n\n')
                    
                    if results['errors']:
                        f.write('–û–®–ò–ë–ö–ò:\n')
                        for error in results['errors']:
                            f.write(f'‚Ä¢ {error}\n')
                        f.write('\n')
                    
                    if results['warnings_list']:
                        f.write('–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø:\n')
                        for warning in results['warnings_list']:
                            f.write(f'‚Ä¢ {warning}\n')
            
            self.stdout.write(
                self.style.SUCCESS(f'üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_file}')
            )
        except Exception as e:
            self.stdout.write(
                self.style.ERROR(f'‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}')
            ) 