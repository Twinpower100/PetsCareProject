# Generated by Django 5.2.5 on 2025-09-15 14:42

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AccessPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Policy Name')),
                ('description', models.TextField(verbose_name='Description')),
                ('access_type', models.CharField(choices=[('ip_based', 'IP-based Access'), ('time_based', 'Time-based Access'), ('role_based', 'Role-based Access'), ('resource_based', 'Resource-based Access'), ('conditional', 'Conditional Access')], max_length=20, verbose_name='Access Type')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('allowed_ips', models.JSONField(default=list, help_text='List of allowed IP addresses', verbose_name='Allowed IPs')),
                ('allowed_time_ranges', models.JSONField(default=list, help_text='List of allowed time ranges', verbose_name='Allowed Time Ranges')),
                ('allowed_roles', models.JSONField(default=list, help_text='List of allowed user roles', verbose_name='Allowed Roles')),
                ('allowed_resources', models.JSONField(default=list, help_text='List of allowed resources/endpoints', verbose_name='Allowed Resources')),
                ('conditions', models.JSONField(default=dict, help_text='Additional access conditions', verbose_name='Access Conditions')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Access Policy',
                'verbose_name_plural': 'Access Policies',
                'db_table': 'security_access_policies',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='DataClassificationPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Policy Name')),
                ('description', models.TextField(verbose_name='Description')),
                ('classification_level', models.CharField(choices=[('public', 'Public'), ('internal', 'Internal'), ('confidential', 'Confidential'), ('restricted', 'Restricted'), ('secret', 'Secret')], max_length=20, verbose_name='Classification Level')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('classification_rules', models.JSONField(default=list, help_text='Rules for data classification', verbose_name='Classification Rules')),
                ('handling_requirements', models.JSONField(default=dict, help_text='Requirements for handling classified data', verbose_name='Handling Requirements')),
                ('access_restrictions', models.JSONField(default=dict, help_text='Access restrictions for classified data', verbose_name='Access Restrictions')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Data Classification Policy',
                'verbose_name_plural': 'Data Classification Policies',
                'db_table': 'security_data_classification_policies',
                'ordering': ['classification_level', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SessionPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Policy Name')),
                ('description', models.TextField(verbose_name='Description')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('max_session_duration_hours', models.PositiveIntegerField(default=24, help_text='Maximum session duration in hours', verbose_name='Max Session Duration (hours)')),
                ('max_concurrent_sessions', models.PositiveIntegerField(default=3, help_text='Maximum number of concurrent sessions per user', verbose_name='Max Concurrent Sessions')),
                ('inactivity_timeout_minutes', models.PositiveIntegerField(default=30, help_text='Session timeout after inactivity', verbose_name='Inactivity Timeout (minutes)')),
                ('force_logout_on_password_change', models.BooleanField(default=True, verbose_name='Force Logout on Password Change')),
                ('parameters', models.JSONField(default=dict, verbose_name='Additional Parameters')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Session Policy',
                'verbose_name_plural': 'Session Policies',
                'db_table': 'security_session_policies',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='SecurityPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Policy Name')),
                ('policy_type', models.CharField(choices=[('password', 'Password Policy'), ('session', 'Session Policy'), ('access', 'Access Policy'), ('data', 'Data Classification Policy'), ('network', 'Network Policy'), ('compliance', 'Compliance Policy')], max_length=20, verbose_name='Policy Type')),
                ('description', models.TextField(verbose_name='Description')),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', max_length=20, verbose_name='Severity')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('parameters', models.JSONField(default=dict, help_text='Policy-specific parameters in JSON format', verbose_name='Policy Parameters')),
                ('violation_actions', models.JSONField(default=list, help_text='List of actions to take on violation', verbose_name='Violation Actions')),
                ('applicable_roles', models.JSONField(default=list, help_text='List of user roles this policy applies to', verbose_name='Applicable Roles')),
                ('applicable_groups', models.JSONField(default=list, help_text='List of user groups this policy applies to', verbose_name='Applicable Groups')),
                ('exceptions', models.JSONField(default=list, help_text='List of exceptions (IPs, users, etc.)', verbose_name='Exceptions')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_policies', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_policies', to=settings.AUTH_USER_MODEL, verbose_name='Updated By')),
            ],
            options={
                'verbose_name': 'Security Policy',
                'verbose_name_plural': 'Security Policies',
                'db_table': 'security_policies',
                'ordering': ['policy_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='PolicyViolation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('violation_type', models.CharField(max_length=50, verbose_name='Violation Type')),
                ('description', models.TextField(verbose_name='Description')),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], max_length=20, verbose_name='Severity')),
                ('status', models.CharField(choices=[('detected', 'Detected'), ('investigating', 'Under Investigation'), ('resolved', 'Resolved'), ('false_positive', 'False Positive'), ('escalated', 'Escalated')], default='detected', max_length=20, verbose_name='Status')),
                ('context_data', models.JSONField(default=dict, help_text='Additional context about the violation', verbose_name='Context Data')),
                ('ip_address', models.GenericIPAddressField(blank=True, null=True, verbose_name='IP Address')),
                ('user_agent', models.TextField(blank=True, verbose_name='User Agent')),
                ('request_path', models.CharField(blank=True, max_length=500, verbose_name='Request Path')),
                ('detected_at', models.DateTimeField(auto_now_add=True, verbose_name='Detected At')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='Resolved At')),
                ('notes', models.TextField(blank=True, verbose_name='Notes')),
                ('actions_taken', models.JSONField(default=list, help_text='List of actions taken in response to violation', verbose_name='Actions Taken')),
                ('resolved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_violations', to=settings.AUTH_USER_MODEL, verbose_name='Resolved By')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User')),
                ('policy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='security.securitypolicy', verbose_name='Policy')),
            ],
            options={
                'verbose_name': 'Policy Violation',
                'verbose_name_plural': 'Policy Violations',
                'db_table': 'security_policy_violations',
                'ordering': ['-detected_at'],
            },
        ),
        migrations.CreateModel(
            name='SecurityThreat',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('threat_type', models.CharField(choices=[('brute_force', 'Brute Force Attack'), ('sql_injection', 'SQL Injection'), ('xss', 'Cross-Site Scripting'), ('path_traversal', 'Path Traversal'), ('rate_limit', 'Rate Limit Exceeded'), ('suspicious_ip', 'Suspicious IP Activity'), ('failed_login', 'Failed Login Attempt'), ('unauthorized_access', 'Unauthorized Access'), ('other', 'Other')], help_text='Type of security threat detected', max_length=50, verbose_name='Threat Type')),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', help_text='Severity level of the threat', max_length=20, verbose_name='Severity')),
                ('ip_address', models.GenericIPAddressField(help_text='IP address of the threat source', verbose_name='IP Address')),
                ('user_agent', models.TextField(blank=True, help_text='User agent string from the request', verbose_name='User Agent')),
                ('request_path', models.CharField(help_text='Requested URL path', max_length=500, verbose_name='Request Path')),
                ('request_method', models.CharField(help_text='HTTP method used', max_length=10, verbose_name='Request Method')),
                ('request_data', models.JSONField(blank=True, help_text='Request data (headers, body, etc.)', null=True, verbose_name='Request Data')),
                ('description', models.TextField(help_text='Detailed description of the threat', verbose_name='Description')),
                ('status', models.CharField(choices=[('active', 'Active'), ('resolved', 'Resolved'), ('false_positive', 'False Positive')], default='active', help_text='Current status of the threat', max_length=20, verbose_name='Status')),
                ('detected_at', models.DateTimeField(auto_now_add=True, help_text='When the threat was detected', verbose_name='Detected At')),
                ('resolved_at', models.DateTimeField(blank=True, help_text='When the threat was resolved', null=True, verbose_name='Resolved At')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about the threat', verbose_name='Notes')),
                ('resolved_by', models.ForeignKey(blank=True, help_text='User who resolved the threat', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='resolved_threats', to=settings.AUTH_USER_MODEL, verbose_name='Resolved By')),
                ('user', models.ForeignKey(blank=True, help_text='User associated with the threat (if authenticated)', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Security Threat',
                'verbose_name_plural': 'Security Threats',
                'db_table': 'security_threats',
                'ordering': ['-detected_at'],
            },
        ),
        migrations.CreateModel(
            name='ThreatPattern',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the threat pattern', max_length=100, verbose_name='Name')),
                ('pattern_type', models.CharField(choices=[('regex', 'Regular Expression'), ('keyword', 'Keyword'), ('path', 'Path Pattern'), ('user_agent', 'User Agent Pattern')], help_text='Type of pattern matching', max_length=20, verbose_name='Pattern Type')),
                ('pattern', models.TextField(help_text='Pattern to match against requests', verbose_name='Pattern')),
                ('threat_type', models.CharField(choices=[('brute_force', 'Brute Force Attack'), ('sql_injection', 'SQL Injection'), ('xss', 'Cross-Site Scripting'), ('path_traversal', 'Path Traversal'), ('rate_limit', 'Rate Limit Exceeded'), ('suspicious_ip', 'Suspicious IP Activity'), ('failed_login', 'Failed Login Attempt'), ('unauthorized_access', 'Unauthorized Access'), ('other', 'Other')], help_text='Type of threat this pattern detects', max_length=50, verbose_name='Threat Type')),
                ('severity', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('critical', 'Critical')], default='medium', help_text='Severity level for matches', max_length=20, verbose_name='Severity')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this pattern is active', verbose_name='Is Active')),
                ('description', models.TextField(blank=True, help_text='Description of what this pattern detects', verbose_name='Description')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this pattern was created', verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='When this pattern was last updated', verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Threat Pattern',
                'verbose_name_plural': 'Threat Patterns',
                'db_table': 'security_threat_patterns',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['pattern_type', 'is_active'], name='security_th_pattern_3e62df_idx'), models.Index(fields=['threat_type', 'is_active'], name='security_th_threat__66dd4a_idx')],
            },
        ),
        migrations.CreateModel(
            name='IPBlacklist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(help_text='Blocked IP address', unique=True, verbose_name='IP Address')),
                ('block_type', models.CharField(choices=[('manual', 'Manual Block'), ('automatic', 'Automatic Block'), ('temporary', 'Temporary Block')], default='automatic', help_text='Type of IP block', max_length=20, verbose_name='Block Type')),
                ('reason', models.TextField(help_text='Reason for blocking this IP', verbose_name='Reason')),
                ('blocked_at', models.DateTimeField(auto_now_add=True, help_text='When the IP was blocked', verbose_name='Blocked At')),
                ('expires_at', models.DateTimeField(blank=True, help_text='When the block expires (null for permanent)', null=True, verbose_name='Expires At')),
                ('threat_count', models.PositiveIntegerField(default=0, help_text='Number of threats from this IP', verbose_name='Threat Count')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this block is currently active', verbose_name='Is Active')),
                ('blocked_by', models.ForeignKey(blank=True, help_text='User who blocked this IP', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Blocked By')),
            ],
            options={
                'verbose_name': 'IP Blacklist',
                'verbose_name_plural': 'IP Blacklist',
                'db_table': 'security_ip_blacklist',
                'ordering': ['-blocked_at'],
                'indexes': [models.Index(fields=['ip_address', 'is_active'], name='security_ip_ip_addr_af3a6f_idx'), models.Index(fields=['expires_at', 'is_active'], name='security_ip_expires_a1ddb6_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='securitypolicy',
            index=models.Index(fields=['policy_type', 'is_active'], name='security_po_policy__cc1cc0_idx'),
        ),
        migrations.AddIndex(
            model_name='securitypolicy',
            index=models.Index(fields=['severity', 'is_active'], name='security_po_severit_e1319b_idx'),
        ),
        migrations.AddIndex(
            model_name='policyviolation',
            index=models.Index(fields=['policy', 'user'], name='security_po_policy__c7b5f4_idx'),
        ),
        migrations.AddIndex(
            model_name='policyviolation',
            index=models.Index(fields=['status', 'detected_at'], name='security_po_status_9be635_idx'),
        ),
        migrations.AddIndex(
            model_name='policyviolation',
            index=models.Index(fields=['severity', 'detected_at'], name='security_po_severit_fd7f49_idx'),
        ),
        migrations.AddIndex(
            model_name='securitythreat',
            index=models.Index(fields=['threat_type', 'detected_at'], name='security_th_threat__2e0077_idx'),
        ),
        migrations.AddIndex(
            model_name='securitythreat',
            index=models.Index(fields=['ip_address', 'detected_at'], name='security_th_ip_addr_0e816e_idx'),
        ),
        migrations.AddIndex(
            model_name='securitythreat',
            index=models.Index(fields=['severity', 'status'], name='security_th_severit_46771c_idx'),
        ),
    ]
