# Generated by Django 5.2.5 on 2025-09-15 12:59

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('catalog', '0001_initial'),
        ('providers', '0002_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Workplace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the workplace', max_length=200, verbose_name='Name')),
                ('description', models.TextField(blank=True, help_text='Description of the workplace', verbose_name='Description')),
                ('workplace_type', models.CharField(choices=[('office', 'Office'), ('room', 'Room'), ('hall', 'Hall'), ('studio', 'Studio'), ('area', 'Area'), ('other', 'Other')], default='room', help_text='Type of workplace', max_length=100, verbose_name='Workplace Type')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this workplace is currently active', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('provider', models.ForeignKey(help_text='Provider this workplace belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='workplaces', to='providers.provider', verbose_name='Provider')),
            ],
            options={
                'verbose_name': 'Workplace',
                'verbose_name_plural': 'Workplaces',
                'ordering': ['provider', 'name'],
            },
        ),
        migrations.CreateModel(
            name='WorkplaceAllowedServices',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.PositiveIntegerField(default=1, help_text='Priority of this service in this workplace (lower number = higher priority)', verbose_name='Priority')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this service is currently available in this workplace', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('service', models.ForeignKey(help_text='Service that can be provided in this workplace', on_delete=django.db.models.deletion.CASCADE, to='catalog.service', verbose_name='Service')),
                ('workplace', models.ForeignKey(help_text='Workplace where these services can be provided', on_delete=django.db.models.deletion.CASCADE, related_name='allowed_services', to='scheduling.workplace', verbose_name='Workplace')),
            ],
            options={
                'verbose_name': 'Workplace Allowed Service',
                'verbose_name_plural': 'Workplace Allowed Services',
                'ordering': ['workplace', 'priority', 'service'],
            },
        ),
        migrations.CreateModel(
            name='DayOff',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='Date of the day off', verbose_name='Date')),
                ('day_off_type', models.CharField(choices=[('personal', 'Personal Day'), ('compensation', 'Compensation Day'), ('holiday', 'Holiday'), ('other', 'Other')], default='personal', help_text='Type of day off', max_length=50, verbose_name='Day Off Type')),
                ('is_approved', models.BooleanField(default=False, help_text='Whether the day off is approved', verbose_name='Is Approved')),
                ('approved_at', models.DateTimeField(blank=True, help_text='When the day off was approved', null=True, verbose_name='Approved At')),
                ('comment', models.TextField(blank=True, help_text='Additional comment about the day off', verbose_name='Comment')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('approved_by', models.ForeignKey(blank=True, help_text='User who approved the day off', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_days_off', to=settings.AUTH_USER_MODEL, verbose_name='Approved By')),
                ('employee', models.ForeignKey(help_text='Employee taking the day off', on_delete=django.db.models.deletion.CASCADE, related_name='days_off', to='providers.employee', verbose_name='Employee')),
            ],
            options={
                'verbose_name': 'Day Off',
                'verbose_name_plural': 'Days Off',
                'ordering': ['-date'],
                'indexes': [models.Index(fields=['employee'], name='scheduling__employe_cf00de_idx'), models.Index(fields=['date'], name='scheduling__date_8a45a7_idx'), models.Index(fields=['is_approved'], name='scheduling__is_appr_c42b48_idx'), models.Index(fields=['day_off_type'], name='scheduling__day_off_5910e1_idx')],
            },
        ),
        migrations.CreateModel(
            name='EmployeeSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.PositiveSmallIntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], help_text='Day of the week', verbose_name='Day Of Week')),
                ('preferred_start_time', models.TimeField(blank=True, help_text='Preferred start time for this day', null=True, verbose_name='Preferred Start Time')),
                ('preferred_end_time', models.TimeField(blank=True, help_text='Preferred end time for this day', null=True, verbose_name='Preferred End Time')),
                ('is_available', models.BooleanField(default=True, help_text='Whether the employee is available on this day', verbose_name='Is Available')),
                ('priority', models.PositiveIntegerField(default=1, help_text='Priority of this preference (lower number = higher priority)', verbose_name='Priority')),
                ('comment', models.TextField(blank=True, help_text='Additional comment about this schedule preference', verbose_name='Comment')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('employee', models.ForeignKey(help_text='Employee this schedule preference belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='preferred_schedules', to='providers.employee', verbose_name='Employee')),
            ],
            options={
                'verbose_name': 'Employee Schedule Preference',
                'verbose_name_plural': 'Employee Schedule Preferences',
                'ordering': ['employee', 'day_of_week'],
                'indexes': [models.Index(fields=['employee'], name='scheduling__employe_c7d05f_idx'), models.Index(fields=['day_of_week'], name='scheduling__day_of__a91cf5_idx'), models.Index(fields=['is_available'], name='scheduling__is_avai_008fa5_idx'), models.Index(fields=['priority'], name='scheduling__priorit_46b3bb_idx')],
                'unique_together': {('employee', 'day_of_week')},
            },
        ),
        migrations.CreateModel(
            name='ServicePriority',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.PositiveIntegerField(default=1, help_text='Priority of this service for scheduling (lower number = higher priority)', verbose_name='Priority')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this priority is currently active', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('provider', models.ForeignKey(help_text='Provider this priority applies to', on_delete=django.db.models.deletion.CASCADE, related_name='service_priorities', to='providers.provider', verbose_name='Provider')),
                ('service', models.ForeignKey(help_text='Service this priority applies to', on_delete=django.db.models.deletion.CASCADE, to='catalog.service', verbose_name='Service')),
            ],
            options={
                'verbose_name': 'Service Priority',
                'verbose_name_plural': 'Service Priorities',
                'ordering': ['provider', 'priority', 'service'],
                'indexes': [models.Index(fields=['provider'], name='scheduling__provide_07d57d_idx'), models.Index(fields=['service'], name='scheduling__service_8e615a_idx'), models.Index(fields=['priority'], name='scheduling__priorit_1a2468_idx'), models.Index(fields=['is_active'], name='scheduling__is_acti_41946a_idx')],
                'unique_together': {('provider', 'service')},
            },
        ),
        migrations.CreateModel(
            name='SickLeave',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(help_text='Start date of the sick leave', verbose_name='Start Date')),
                ('end_date', models.DateField(blank=True, help_text='End date of the sick leave (may be unknown initially)', null=True, verbose_name='End Date')),
                ('sick_leave_type', models.CharField(choices=[('illness', 'Illness'), ('injury', 'Injury'), ('pregnancy', 'Pregnancy Related'), ('other', 'Other')], default='illness', help_text='Type of sick leave', max_length=50, verbose_name='Sick Leave Type')),
                ('is_confirmed', models.BooleanField(default=False, help_text='Whether the sick leave is confirmed', verbose_name='Is Confirmed')),
                ('confirmed_at', models.DateTimeField(blank=True, help_text='When the sick leave was confirmed', null=True, verbose_name='Confirmed At')),
                ('comment', models.TextField(blank=True, help_text='Additional comment about the sick leave', verbose_name='Comment')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('confirmed_by', models.ForeignKey(blank=True, help_text='User who confirmed the sick leave', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='confirmed_sick_leaves', to=settings.AUTH_USER_MODEL, verbose_name='Confirmed By')),
                ('employee', models.ForeignKey(help_text='Employee on sick leave', on_delete=django.db.models.deletion.CASCADE, related_name='sick_leaves', to='providers.employee', verbose_name='Employee')),
            ],
            options={
                'verbose_name': 'Sick Leave',
                'verbose_name_plural': 'Sick Leaves',
                'ordering': ['-start_date'],
                'indexes': [models.Index(fields=['employee'], name='scheduling__employe_aee4e3_idx'), models.Index(fields=['start_date'], name='scheduling__start_d_abd514_idx'), models.Index(fields=['end_date'], name='scheduling__end_dat_4c6839_idx'), models.Index(fields=['is_confirmed'], name='scheduling__is_conf_3faa02_idx'), models.Index(fields=['sick_leave_type'], name='scheduling__sick_le_31d9c0_idx')],
            },
        ),
        migrations.CreateModel(
            name='StaffingRequirement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.PositiveSmallIntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], help_text='Day of the week', verbose_name='Day Of Week')),
                ('required_count', models.PositiveIntegerField(default=1, help_text='Number of specialists required for this service on this day', verbose_name='Required Count')),
                ('priority', models.PositiveIntegerField(default=1, help_text='Priority of this requirement (lower number = higher priority)', verbose_name='Priority')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this requirement is currently active', verbose_name='Is Active')),
                ('comment', models.TextField(blank=True, help_text='Additional comment about this requirement', verbose_name='Comment')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('provider', models.ForeignKey(help_text='Provider this requirement applies to', on_delete=django.db.models.deletion.CASCADE, related_name='staffing_requirements', to='providers.provider', verbose_name='Provider')),
                ('service', models.ForeignKey(help_text='Service this requirement applies to', on_delete=django.db.models.deletion.CASCADE, to='catalog.service', verbose_name='Service')),
            ],
            options={
                'verbose_name': 'Staffing Requirement',
                'verbose_name_plural': 'Staffing Requirements',
                'ordering': ['provider', 'day_of_week', 'priority', 'service'],
                'indexes': [models.Index(fields=['provider'], name='scheduling__provide_5478db_idx'), models.Index(fields=['service'], name='scheduling__service_489571_idx'), models.Index(fields=['day_of_week'], name='scheduling__day_of__1cadab_idx'), models.Index(fields=['required_count'], name='scheduling__require_e378ac_idx'), models.Index(fields=['priority'], name='scheduling__priorit_d0b274_idx'), models.Index(fields=['is_active'], name='scheduling__is_acti_49def0_idx')],
                'unique_together': {('provider', 'service', 'day_of_week')},
            },
        ),
        migrations.CreateModel(
            name='Vacation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_date', models.DateField(help_text='Start date of the vacation', verbose_name='Start Date')),
                ('end_date', models.DateField(help_text='End date of the vacation', verbose_name='End Date')),
                ('vacation_type', models.CharField(choices=[('annual', 'Annual Leave'), ('sick', 'Sick Leave'), ('maternity', 'Maternity Leave'), ('paternity', 'Paternity Leave'), ('unpaid', 'Unpaid Leave'), ('other', 'Other')], default='annual', help_text='Type of vacation', max_length=50, verbose_name='Vacation Type')),
                ('is_approved', models.BooleanField(default=False, help_text='Whether the vacation is approved', verbose_name='Is Approved')),
                ('approved_at', models.DateTimeField(blank=True, help_text='When the vacation was approved', null=True, verbose_name='Approved At')),
                ('comment', models.TextField(blank=True, help_text='Additional comment about the vacation', verbose_name='Comment')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('approved_by', models.ForeignKey(blank=True, help_text='User who approved the vacation', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_vacations', to=settings.AUTH_USER_MODEL, verbose_name='Approved By')),
                ('employee', models.ForeignKey(help_text='Employee taking the vacation', on_delete=django.db.models.deletion.CASCADE, related_name='vacations', to='providers.employee', verbose_name='Employee')),
            ],
            options={
                'verbose_name': 'Vacation',
                'verbose_name_plural': 'Vacations',
                'ordering': ['-start_date'],
                'indexes': [models.Index(fields=['employee'], name='scheduling__employe_6f3d83_idx'), models.Index(fields=['start_date'], name='scheduling__start_d_4c0a54_idx'), models.Index(fields=['end_date'], name='scheduling__end_dat_fb04eb_idx'), models.Index(fields=['is_approved'], name='scheduling__is_appr_c0b87f_idx'), models.Index(fields=['vacation_type'], name='scheduling__vacatio_766c9b_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='workplace',
            index=models.Index(fields=['provider'], name='scheduling__provide_55e33b_idx'),
        ),
        migrations.AddIndex(
            model_name='workplace',
            index=models.Index(fields=['is_active'], name='scheduling__is_acti_c1d231_idx'),
        ),
        migrations.AddIndex(
            model_name='workplace',
            index=models.Index(fields=['workplace_type'], name='scheduling__workpla_0e1fd4_idx'),
        ),
        migrations.AddIndex(
            model_name='workplaceallowedservices',
            index=models.Index(fields=['workplace'], name='scheduling__workpla_a43835_idx'),
        ),
        migrations.AddIndex(
            model_name='workplaceallowedservices',
            index=models.Index(fields=['service'], name='scheduling__service_d2f7f3_idx'),
        ),
        migrations.AddIndex(
            model_name='workplaceallowedservices',
            index=models.Index(fields=['priority'], name='scheduling__priorit_c7bace_idx'),
        ),
        migrations.AddIndex(
            model_name='workplaceallowedservices',
            index=models.Index(fields=['is_active'], name='scheduling__is_acti_a72693_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='workplaceallowedservices',
            unique_together={('workplace', 'service')},
        ),
    ]
