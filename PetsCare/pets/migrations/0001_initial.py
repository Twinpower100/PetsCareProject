# Generated by Django 5.2.5 on 2025-09-15 12:58

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('catalog', '0001_initial'),
        ('providers', '0002_initial'),
        ('users', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Breed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the breed', max_length=100, verbose_name='Name')),
                ('code', models.CharField(help_text='Unique technical code (Latin letters, numbers, underscores). Used for integrations and business logic.', max_length=50, unique=True, validators=[django.core.validators.RegexValidator(message='Code must contain only Latin letters, numbers and underscores.', regex='^[a-zA-Z0-9_]+$')], verbose_name='Code')),
                ('description', models.TextField(blank=True, help_text='Description of the breed', verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Breed',
                'verbose_name_plural': 'Breeds',
                'ordering': ['pet_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='DocumentType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the document type (e.g., "Pet Passport", "Veterinary Certificate")', max_length=100, verbose_name='Name')),
                ('code', models.CharField(help_text='Unique technical code (Latin letters, numbers, underscores). Used for integrations and business logic.', max_length=50, unique=True, validators=[django.core.validators.RegexValidator(message='Code must contain only Latin letters, numbers and underscores.', regex='^[a-zA-Z0-9_]+$')], verbose_name='Code')),
                ('description', models.TextField(blank=True, help_text='Description of the document type', verbose_name='Description')),
                ('requires_issue_date', models.BooleanField(default=False, help_text='Whether issue date is required', verbose_name='Requires Issue Date')),
                ('requires_expiry_date', models.BooleanField(default=False, help_text='Whether expiry date is required', verbose_name='Requires Expiry Date')),
                ('requires_issuing_authority', models.BooleanField(default=False, help_text='Whether issuing authority is required', verbose_name='Requires Issuing Authority')),
                ('requires_document_number', models.BooleanField(default=False, help_text='Whether document number is required', verbose_name='Requires Document Number')),
                ('is_active', models.BooleanField(default=True, help_text='Whether the document type is active', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Document Type',
                'verbose_name_plural': 'Document Types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='PetType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Type of pet (e.g., cat, dog, etc.)', max_length=50, unique=True, verbose_name='Name')),
                ('code', models.CharField(help_text='Unique technical code (Latin letters, numbers, underscores). Used for integrations and business logic.', max_length=50, unique=True, validators=[django.core.validators.RegexValidator(message='Code must contain only Latin letters, numbers and underscores.', regex='^[a-zA-Z0-9_]+$')], verbose_name='Code')),
                ('description', models.TextField(blank=True, help_text='Description of the pet type', verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Pet Type',
                'verbose_name_plural': 'Pet Types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Pet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Pet name', max_length=100, verbose_name='Name')),
                ('birth_date', models.DateField(blank=True, help_text='Pet birth date', null=True, verbose_name='Birth Date')),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Pet weight in kg', max_digits=5, null=True, verbose_name='Weight')),
                ('description', models.TextField(blank=True, help_text='Additional information about the pet', verbose_name='Description')),
                ('special_needs', models.JSONField(default=dict, help_text='Special care requirements', verbose_name='Special Needs')),
                ('medical_conditions', models.JSONField(default=dict, help_text='Medical conditions and history', verbose_name='Medical Conditions')),
                ('photo', models.ImageField(blank=True, help_text='Pet photo', null=True, upload_to='pets/%Y/%m/%d/', verbose_name='Photo')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('breed', models.ForeignKey(blank=True, help_text='Pet breed', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pets', to='pets.breed', verbose_name='Breed')),
                ('main_owner', models.ForeignKey(blank=True, help_text='Main owner of the pet', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='main_pets', to='users.user', verbose_name='Main Owner')),
                ('owners', models.ManyToManyField(help_text='All owners of the pet', related_name='pets', to='users.user', verbose_name='Owners')),
                ('pet_type', models.ForeignKey(help_text='Type of pet', on_delete=django.db.models.deletion.PROTECT, related_name='pets', to='pets.pettype', verbose_name='Pet Type')),
            ],
            options={
                'verbose_name': 'Pet',
                'verbose_name_plural': 'Pets',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='MedicalRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(help_text='Date of the medical record', verbose_name='Date')),
                ('title', models.CharField(help_text='Title of the medical record', max_length=200, verbose_name='Title')),
                ('description', models.TextField(help_text='Description of the medical record', verbose_name='Description')),
                ('attachments', models.FileField(blank=True, help_text='Any attachments (test results, prescriptions, etc.)', null=True, upload_to='medical_records/%Y/%m/%d/', verbose_name='Attachments')),
                ('next_visit', models.DateField(blank=True, help_text='Date of the next recommended visit', null=True, verbose_name='Next Visit')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('pet', models.ForeignKey(help_text='Pet this record belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='medical_records', to='pets.pet', verbose_name='Pet')),
            ],
            options={
                'verbose_name': 'Medical Record',
                'verbose_name_plural': 'Medical Records',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='PetOwnerIncapacity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending_confirmation', 'Pending Confirmation'), ('confirmed_incapacity', 'Confirmed Incapacity'), ('pet_lost', 'Pet Lost/Deceased'), ('resolved', 'Resolved'), ('auto_deleted', 'Auto Deleted'), ('coowner_assigned', 'Co-owner Assigned as Main')], default='pending_confirmation', max_length=30, verbose_name='Status')),
                ('flow_type', models.CharField(choices=[('automatic_detection', 'Automatic Detection'), ('coowner_report_pet_lost', 'Co-owner Report: Pet Lost'), ('coowner_report_owner_incapacity', 'Co-owner Report: Owner Incapacity')], help_text='Type of incapacity handling flow', max_length=35, verbose_name='Flow Type')),
                ('incapacity_reason', models.TextField(blank=True, help_text='Reason for incapacity (if reported by co-owner)', verbose_name='Incapacity Reason')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('confirmation_deadline', models.DateTimeField(help_text='Deadline for pet status confirmation', verbose_name='Confirmation Deadline')),
                ('resolved_at', models.DateTimeField(blank=True, null=True, verbose_name='Resolved At')),
                ('auto_action_taken', models.CharField(blank=True, help_text='Automatic action that was taken', max_length=50, verbose_name='Auto Action Taken')),
                ('notifications_sent', models.JSONField(default=list, help_text='List of notification IDs sent to owners', verbose_name='Notifications Sent')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this incapacity case', verbose_name='Notes')),
                ('main_owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incapacity_records_as_main', to='users.user', verbose_name='Main Owner')),
                ('new_main_owner', models.ForeignKey(blank=True, help_text='New main owner assigned automatically', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='incapacity_records_as_new_main', to='users.user', verbose_name='New Main Owner')),
                ('pet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incapacity_records', to='pets.pet', verbose_name='Pet')),
                ('reported_by', models.ForeignKey(help_text='User who reported the incapacity', on_delete=django.db.models.deletion.CASCADE, related_name='incapacity_reports', to='users.user', verbose_name='Reported By')),
            ],
            options={
                'verbose_name': 'Pet Owner Incapacity',
                'verbose_name_plural': 'Pet Owner Incapacities',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PetIncapacityNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('confirmation_request', 'Confirmation Request'), ('deadline_warning', 'Deadline Warning'), ('auto_action_notification', 'Auto Action Notification'), ('resolution_notification', 'Resolution Notification')], max_length=30, verbose_name='Notification Type')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('failed', 'Failed')], default='pending', max_length=20, verbose_name='Status')),
                ('subject', models.CharField(max_length=200, verbose_name='Subject')),
                ('message', models.TextField(verbose_name='Message')),
                ('sent_at', models.DateTimeField(blank=True, null=True, verbose_name='Sent At')),
                ('error_message', models.TextField(blank=True, verbose_name='Error Message')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='incapacity_notifications_received', to='users.user', verbose_name='Recipient')),
                ('incapacity_record', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='pets.petownerincapacity', verbose_name='Incapacity Record')),
            ],
            options={
                'verbose_name': 'Pet Incapacity Notification',
                'verbose_name_plural': 'Pet Incapacity Notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PetOwnershipInvite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, verbose_name='Email')),
                ('token', models.UUIDField(default=uuid.uuid4, unique=True, verbose_name='Token')),
                ('expires_at', models.DateTimeField(verbose_name='Expires At')),
                ('type', models.CharField(choices=[('invite', 'Invite Owner'), ('transfer', 'Transfer Main Owner')], max_length=16, verbose_name='Type')),
                ('is_used', models.BooleanField(default=False, verbose_name='Is Used')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('invited_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_pet_invites', to='users.user', verbose_name='Invited By')),
                ('pet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ownership_invites', to='pets.pet', verbose_name='Pet')),
            ],
            options={
                'verbose_name': 'Pet Ownership Invite',
                'verbose_name_plural': 'Pet Ownership Invites',
            },
        ),
        migrations.CreateModel(
            name='PetRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(help_text='Date and time when the procedure was performed', verbose_name='Date')),
                ('next_date', models.DateField(blank=True, help_text='Date when the next procedure should be performed', null=True, verbose_name='Next Date')),
                ('description', models.TextField(help_text='Description of what was done', verbose_name='Description')),
                ('results', models.TextField(blank=True, help_text='Results of the procedure', verbose_name='Results')),
                ('recommendations', models.TextField(blank=True, help_text='Recommendations for the pet owner', verbose_name='Recommendations')),
                ('notes', models.TextField(blank=True, help_text='Internal notes', verbose_name='Notes')),
                ('serial_number', models.CharField(blank=True, help_text='Serial number (for vaccinations, medications, etc.)', max_length=100, verbose_name='Serial Number')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='created_records', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='pet_records', to='providers.employee', verbose_name='Employee')),
                ('pet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='records', to='pets.pet', verbose_name='Pet')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='pet_records', to='providers.provider', verbose_name='Provider')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='pet_records', to='catalog.service', verbose_name='Service')),
            ],
            options={
                'verbose_name': 'Pet Record',
                'verbose_name_plural': 'Pet Records',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='PetRecordFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(help_text='Document file', upload_to='pets/documents/%Y/%m/%d/', verbose_name='File')),
                ('name', models.CharField(help_text='Document name', max_length=255, verbose_name='Name')),
                ('description', models.TextField(blank=True, help_text='Document description', verbose_name='Description')),
                ('issue_date', models.DateField(blank=True, help_text='Document issue date', null=True, verbose_name='Issue Date')),
                ('expiry_date', models.DateField(blank=True, help_text='Document expiry date', null=True, verbose_name='Expiry Date')),
                ('document_number', models.CharField(blank=True, help_text='Document number', max_length=100, verbose_name='Document Number')),
                ('issuing_authority', models.CharField(blank=True, help_text='Issuing authority', max_length=200, verbose_name='Issuing Authority')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True, help_text='Upload date and time', verbose_name='Uploaded At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('document_type', models.ForeignKey(blank=True, help_text='Type of the document', null=True, on_delete=django.db.models.deletion.PROTECT, related_name='documents', to='pets.documenttype', verbose_name='Document Type')),
                ('medical_record', models.ForeignKey(blank=True, help_text='Medical record to which the document is attached', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='pets.medicalrecord', verbose_name='Medical Record')),
                ('pet', models.ForeignKey(help_text='Pet to which the document belongs', on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='pets.pet', verbose_name='Pet')),
                ('pet_record', models.ForeignKey(blank=True, help_text='Pet record to which the document is attached', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='pets.petrecord', verbose_name='Pet Record')),
                ('uploaded_by', models.ForeignKey(help_text='User who uploaded the document', on_delete=django.db.models.deletion.PROTECT, related_name='uploaded_documents', to=settings.AUTH_USER_MODEL, verbose_name='Uploaded By')),
            ],
            options={
                'verbose_name': 'Pet Document',
                'verbose_name_plural': 'Pet Documents',
                'ordering': ['-uploaded_at'],
            },
        ),
        migrations.AddField(
            model_name='petrecord',
            name='files',
            field=models.ManyToManyField(blank=True, related_name='records', to='pets.petrecordfile', verbose_name='Files'),
        ),
        migrations.AddField(
            model_name='breed',
            name='pet_type',
            field=models.ForeignKey(help_text='Type of pet this breed belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='breeds', to='pets.pettype', verbose_name='Pet Type'),
        ),
        migrations.CreateModel(
            name='PetAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.UUIDField(unique=True, verbose_name='Token')),
                ('expires_at', models.DateTimeField(verbose_name='Expires At')),
                ('permissions', models.JSONField(default=dict, verbose_name='Permissions')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('granted_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='granted_pet_accesses', to=settings.AUTH_USER_MODEL, verbose_name='Granted By')),
                ('granted_to', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pet_accesses', to=settings.AUTH_USER_MODEL, verbose_name='Granted To')),
                ('pet', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accesses', to='pets.pet', verbose_name='Pet')),
            ],
            options={
                'verbose_name': 'Pet Access',
                'verbose_name_plural': 'Pet Accesses',
                'ordering': ['-created_at'],
                'unique_together': {('pet', 'granted_to')},
            },
        ),
        migrations.AddIndex(
            model_name='petownerincapacity',
            index=models.Index(fields=['status'], name='pets_petown_status_be518d_idx'),
        ),
        migrations.AddIndex(
            model_name='petownerincapacity',
            index=models.Index(fields=['flow_type'], name='pets_petown_flow_ty_14a84f_idx'),
        ),
        migrations.AddIndex(
            model_name='petownerincapacity',
            index=models.Index(fields=['confirmation_deadline'], name='pets_petown_confirm_13bcc8_idx'),
        ),
        migrations.AddIndex(
            model_name='petownerincapacity',
            index=models.Index(fields=['pet', 'main_owner'], name='pets_petown_pet_id_51c03b_idx'),
        ),
        migrations.AddIndex(
            model_name='petincapacitynotification',
            index=models.Index(fields=['status'], name='pets_petinc_status_98c70e_idx'),
        ),
        migrations.AddIndex(
            model_name='petincapacitynotification',
            index=models.Index(fields=['notification_type'], name='pets_petinc_notific_2be979_idx'),
        ),
        migrations.AddIndex(
            model_name='petincapacitynotification',
            index=models.Index(fields=['recipient'], name='pets_petinc_recipie_c83b1a_idx'),
        ),
        migrations.AddIndex(
            model_name='petownershipinvite',
            index=models.Index(fields=['token'], name='pets_petown_token_d0f837_idx'),
        ),
        migrations.AddIndex(
            model_name='petownershipinvite',
            index=models.Index(fields=['expires_at'], name='pets_petown_expires_eaad7b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='breed',
            unique_together={('pet_type', 'name')},
        ),
    ]
