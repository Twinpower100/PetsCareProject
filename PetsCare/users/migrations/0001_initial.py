# Generated by Django 5.2.5 on 2025-09-15 12:57

import django.contrib.postgres.fields
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields
import users.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EmployeeSpecialization',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='Specialization Name')),
                ('description', models.TextField(blank=True, verbose_name='Description')),
                ('permissions', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), default=list, help_text='List of specific permissions for this specialization', size=None, verbose_name='Permissions')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'Employee Specialization',
                'verbose_name_plural': 'Employee Specializations',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='UserType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Unique role name', max_length=50, unique=True, verbose_name='Name')),
                ('description', models.TextField(blank=True, help_text='Role description', verbose_name='Description')),
                ('permissions', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=100), default=list, help_text='List of permissions for this role', size=None, verbose_name='Permissions')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this role is currently active', verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
            ],
            options={
                'verbose_name': 'User Type',
                'verbose_name_plural': 'User Types',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(error_messages={'max_length': 'Username is too long.', 'unique': 'A user with that username already exists.'}, help_text='Required. Unique username for profile and social features.', max_length=150, unique=True, verbose_name='Username')),
                ('email', models.EmailField(error_messages={'unique': 'A user with that email already exists.'}, help_text='Required. Unique email for authentication.', max_length=254, unique=True, verbose_name='Email Address')),
                ('first_name', models.CharField(blank=True, help_text='Optional.', max_length=30, verbose_name='First Name')),
                ('last_name', models.CharField(blank=True, help_text='Optional.', max_length=150, verbose_name='Last Name')),
                ('date_of_birth', models.DateField(blank=True, help_text='Format: YYYY-MM-DD', null=True, verbose_name='Date Of Birth')),
                ('profile_picture', models.ImageField(blank=True, help_text='Optional. User avatar.', null=True, upload_to='users/%Y/%m/%d/', verbose_name='Profile Picture')),
                ('phone_number', phonenumber_field.modelfields.PhoneNumberField(blank=True, help_text='Optional. Unique phone number.', max_length=128, region=None, unique=True, verbose_name='Phone Number')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='custom_user_set', related_query_name='custom_user', to='auth.group', verbose_name='Groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='custom_user_set', related_query_name='custom_user', to='auth.permission', verbose_name='User permissions')),
                ('user_types', models.ManyToManyField(blank=True, help_text='Roles of the user in the system.', to='users.usertype', verbose_name='User Types')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', users.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ProviderForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('provider_name', models.CharField(max_length=100, verbose_name='Provider Name')),
                ('provider_address', models.CharField(max_length=200, verbose_name='Provider Address')),
                ('provider_phone', phonenumber_field.modelfields.PhoneNumberField(max_length=128, region=None, verbose_name='Provider Phone')),
                ('documents', models.FileField(blank=True, help_text='Required only if the institution provides services that require licensing or certification', null=True, upload_to='provider_docs/%Y/%m/%d/', verbose_name='Registration Documents')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20, verbose_name='Status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('approved_at', models.DateTimeField(blank=True, null=True, verbose_name='Approved At')),
                ('approved_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='approved_forms', to='users.user', verbose_name='Approved By')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='provider_forms', to='users.user', verbose_name='Created By')),
            ],
            options={
                'verbose_name': 'Provider Form',
                'verbose_name_plural': 'Provider Forms',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RoleInvite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(help_text='Email of the user to invite', max_length=254, verbose_name='Email')),
                ('role', models.CharField(choices=[('employee', 'Employee'), ('billing_manager', 'Billing Manager')], help_text='Role to assign', max_length=20, verbose_name='Role')),
                ('position', models.CharField(blank=True, help_text='Position for employee role', max_length=100, verbose_name='Position')),
                ('comment', models.TextField(blank=True, help_text='Additional comment about this invite', verbose_name='Comment')),
                ('token', models.CharField(help_text='Unique token for invite confirmation', max_length=64, unique=True, verbose_name='Token')),
                ('qr_code', models.TextField(blank=True, help_text='QR code data for mobile app scanning', verbose_name='QR Code')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('declined', 'Declined'), ('expired', 'Expired')], default='pending', help_text='Current status of the invite', max_length=20, verbose_name='Status')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('expires_at', models.DateTimeField(help_text='When this invite expires', verbose_name='Expires At')),
                ('accepted_at', models.DateTimeField(blank=True, help_text='When the invite was accepted', null=True, verbose_name='Accepted At')),
                ('declined_at', models.DateTimeField(blank=True, help_text='When the invite was declined', null=True, verbose_name='Declined At')),
                ('accepted_by', models.ForeignKey(blank=True, help_text='User who accepted this invite', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='accepted_role_invites', to=settings.AUTH_USER_MODEL, verbose_name='Accepted By')),
                ('created_by', models.ForeignKey(help_text='User who created this invite', on_delete=django.db.models.deletion.CASCADE, related_name='sent_role_invites', to=settings.AUTH_USER_MODEL, verbose_name='Created By')),
                ('provider', models.ForeignKey(help_text='Provider for employee role or project for billing manager', on_delete=django.db.models.deletion.CASCADE, to='providers.provider', verbose_name='Provider')),
            ],
            options={
                'verbose_name': 'Role Invite',
                'verbose_name_plural': 'Role Invites',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['email'], name='users_rolei_email_5d34a1_idx'), models.Index(fields=['token'], name='users_rolei_token_f9cfc3_idx'), models.Index(fields=['status'], name='users_rolei_status_64d92b_idx'), models.Index(fields=['expires_at'], name='users_rolei_expires_e49fdd_idx'), models.Index(fields=['role', 'provider'], name='users_rolei_role_b6af1b_idx')],
            },
        ),
        migrations.CreateModel(
            name='ProviderAdmin',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admins', to='providers.provider', verbose_name='Provider')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='admin_providers', to='users.user', verbose_name='User')),
            ],
            options={
                'verbose_name': 'Provider Admin',
                'verbose_name_plural': 'Provider Admins',
                'ordering': ['-created_at'],
                'unique_together': {('user', 'provider')},
            },
        ),
    ]
